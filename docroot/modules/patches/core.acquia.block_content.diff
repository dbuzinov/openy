diff --git a/core/modules/block_content/src/Plugin/Derivative/BlockContent.php b/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
index 25806c5f13..63fb0da1d9 100644
--- a/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
+++ b/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
@@ -3,6 +3,7 @@
 namespace Drupal\block_content\Plugin\Derivative;

 use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -13,29 +14,28 @@
 class BlockContent extends DeriverBase implements ContainerDeriverInterface {

   /**
-   * The custom block storage.
+   * The database connection.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var \Drupal\Core\Database\Connection
    */
-  protected $blockContentStorage;
+  protected $connection;

   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_content_storage
-   *   The custom block storage.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
    */
-  public function __construct(EntityStorageInterface $block_content_storage) {
-    $this->blockContentStorage = $block_content_storage;
+  public function __construct(Connection $connection) {
+    $this->connection = $connection;
   }

   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, $base_plugin_id) {
-    $entity_manager = $container->get('entity.manager');
     return new static(
-      $entity_manager->getStorage('block_content')
+      $container->get('database')
     );
   }

@@ -43,15 +43,19 @@ public static function create(ContainerInterface $container, $base_plugin_id) {
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    $block_contents = $this->blockContentStorage->loadMultiple();
+    $query = $this->connection->select('block_content', 'bc')
+      ->fields('bc');
+    $query->addJoin('left', 'block_content_field_revision', 'f', 'f.revision_id = bc.revision_id');
+    $query->fields('f');
+    $results = $query->execute();
     // Reset the discovered definitions.
     $this->derivatives = [];
     /** @var $block_content \Drupal\block_content\Entity\BlockContent */
-    foreach ($block_contents as $block_content) {
-      $this->derivatives[$block_content->uuid()] = $base_plugin_definition;
-      $this->derivatives[$block_content->uuid()]['admin_label'] = $block_content->label();
-      $this->derivatives[$block_content->uuid()]['config_dependencies']['content'] = [
-        $block_content->getConfigDependencyName()
+    foreach ($results as $block_content) {
+      $this->derivatives[$block_content->uuid] = $base_plugin_definition;
+      $this->derivatives[$block_content->uuid]['admin_label'] = $block_content->info;
+      $this->derivatives[$block_content->uuid]['config_dependencies']['content'] = [
+        "block_content:{$block_content->uuid}:{$block_content->type}"
       ];
     }
     return parent::getDerivativeDefinitions($base_plugin_definition);
