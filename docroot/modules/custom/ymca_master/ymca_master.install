<?php

/**
 * @file
 * Module for hook_update_N.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Database\Database;
use Drupal\node\Entity\Node;
use Drupal\redirect\Entity\Redirect;
use Drupal\redirect\Exception\RedirectLoopException;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\ymca_aliases\UrlCleaner;
use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
use Drupal\ymca_mappings\Entity\Mapping;
use Drupal\Core\File;
use Drupal\file\Entity\File as EntityFile;

/**
 * Protecting sites with a shield.
 */
function ymca_master_update_8001() {
  \Drupal::service('module_installer')->install(array('shield'), TRUE);
}

/**
 * Remove 'field_exclude_from_navigation' field from 'Page' content type.
 */
function ymca_master_update_8002() {
  $field_config = FieldConfig::loadByName('node', 'article', 'field_exclude_from_navigation');

  $field_storage = $field_config->getFieldStorageDefinition();
  $bundles = \Drupal::entityManager()->getBundleInfo($field_config->getTargetEntityTypeId());
  $bundle_label = $bundles[$field_config->getTargetBundle()]['label'];

  if ($field_storage && !$field_storage->isLocked()) {
    $field_config->delete();
    \Drupal::logger('ymca_master')->info('The field %field has been deleted from the %type content type.', array('%field' => $field_config->label(), '%type' => $bundle_label));
  }
  else {
    \Drupal::logger('ymca_master')->error('There was a problem removing the %field from the %type content type.', array('%field' => $field_config->label(), '%type' => $bundle_label));
  }

  // Fields are purged on cron.
  field_purge_batch(10);
}

/**
 * Set appropriate node aliases for news pages.
 */
function ymca_master_update_8003() {
  // @todo run this after next reimport from ClockWork source DB.
  $news_term_id = \Drupal::entityQuery('taxonomy_term')
    ->condition('name', 'News')
    ->condition('vid', 'tags')
    ->execute();
  $term_id = (int) array_shift($news_term_id);

  $news_node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'blog')
    ->condition('field_tags', $term_id)
    ->execute();

  foreach (array_values($news_node_ids) as $id) {
    $sources[] = '/node/' . $id;
  }

  $aliases_to_change = db_select('url_alias', 'ua')
    ->fields('ua', ['source', 'alias'])
    ->condition('ua.source', $sources, 'IN')
    ->execute()
    ->fetchAllAssoc('source');

  foreach ($aliases_to_change as $item) {
    preg_match("/\/blog\/([0-9]{4})\/([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{1,4})\/(.*)/", $item->alias, $match);
    if (count($match) != 6) {
      continue;
    }
    if (strlen($match[2]) == 1) {
      $match[2] = '0' . $match[2];
    }
    if (strlen($match[3]) == 1) {
      $match[3] = '0' . $match[3];
    }
    $new_alias = '/news/' . $match[1] . '/' . $match[2] . '/' . $match[3] . '/' . $match[4] . '/' . $match[5];

    db_update('url_alias')
      ->fields(array('alias' => $new_alias))
      ->condition('source', $item->source)
      ->execute();

  }

}

/**
 * Install ymca_personify module.
 */
function ymca_master_update_8004() {
  \Drupal::service('module_installer')->install(array('ymca_personify'), TRUE);
}

/**
 * Configure menu items for personify.
 */
function ymca_master_update_8005() {
  // Remove Sign In old link.
  /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('menu_link_content');
  $entity = $storage->load(210);
  $entity->delete();
}

/**
 * Update config of ymca_groupex module.
 */
function ymca_master_update_8006() {
  \Drupal::service('module_installer')->uninstall(array('ymca_groupex'));
  \Drupal::service('module_installer')->install(array('ymca_groupex'), TRUE);
}

/**
 * Install ymca_search_alter module.
 */
function ymca_master_update_8007() {
  \Drupal::service('module_installer')->install(array('ymca_search_alter'), TRUE);
}

/**
 * Enable config of ymca_frontend module.
 */
function ymca_master_update_8008() {
  \Drupal::service('module_installer')->uninstall(array('ymca_frontend'));
  \Drupal::service('module_installer')->install(array('ymca_frontend'), TRUE);
}

/**
 * Fix token replacements.
 */
function ymca_master_update_8009() {
  $fields = [
    'field_content',
    'field_lead_description',
    'field_sidebar',
    'field_summary',
  ];

  // Get all nodes with non-replaced tokens.
  $ids = [];
  foreach ($fields as $field) {
    $query = db_select(sprintf('node__%s', $field), 'c')
      ->fields('c', ['entity_id']);

    $or = db_or();
    $or->condition(sprintf('%s_value', $field), '%' . db_like('{{internal_asset_link') . '%', 'LIKE');
    $or->condition(sprintf('%s_value', $field), '%' . db_like('{{internal_page_link') . '%', 'LIKE');

    $query->condition($or);

    $ids += $query->execute()->fetchAllKeyed(0, 0);
  }

  $service = Drupal::service('ymcareplacetokens.service');

  // Replace tokens withing the nodes and fields.
  foreach ($ids as $nid) {
    $node = Node::load($nid);
    foreach ($fields as $field) {
      if ($node->hasField($field)) {
        foreach ($node->$field as &$item) {
          try {
            $item->set('value', $service->processText($item->value));
          }
          catch (Exception $e) {
            // Set unprocessed value and log an error.
            $item->set('value', $item->value);
            \Drupal::logger('ymca_master')
              ->error(
                'Replacement tokens error: %message',
                ['%message' => $e->getMessage()]
              );
          }
        }
      }
    }

    $node->save();
  }
}

/**
 * Enable ymca_activity_finder module.
 */
function ymca_master_update_8010() {
  \Drupal::service('module_installer')->install(['ymca_activity_finder'], TRUE);
}

/**
 * Enable config_import module.
 */
function ymca_master_update_8011() {
  \Drupal::service('module_installer')->install(['config_import'], TRUE);
}

/**
 * Recreate schedules blocks.
 */
function ymca_master_update_8012() {
  module_load_include('php', 'ymca_master', 'include/ymca_master.8011');
  $blocks = _ymca_master_schedules_block_data();
  foreach ($blocks as $block_data) {
    $block = BlockContent::create($block_data)->enforceIsNew();
    $block->save();
  }

  // Re-import configs.
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/block.block.schedulesrightblocks.yml',
    'sites/default/config/staging/block.block.allyschedulesformtitle.yml',
    'sites/default/config/staging/block.block.allyschedulesleadleft.yml',
    'sites/default/config/staging/block.block.allyschedulesleadright.yml',
  ]);
}

/**
 * Add aliases for groupex search results.
 */
function ymca_master_update_8013() {
  $query = db_select('url_alias', 'a')
    ->fields('a')
    ->condition('source', '/node/%/schedules', 'LIKE')
    ->execute();

  while ($row = $query->fetchObject()) {
    // Create new alias here.
    $suffix = 'group_exercise_search_results';
    $source = $row->source . '/' . $suffix;
    $alias = $row->alias . '/' . $suffix;
    \Drupal::service('path.alias_storage')->save($source, $alias, 'en');
  }
}

/**
 * Enable modules.
 */
function ymca_master_update_8014() {
  $modules = [
    'ymca_aliases',
    'ymca_blog_listing',
    'ymca_breadcrumb',
  ];
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Remove all Camp-related 'News & Events' nodes.
 */
function ymca_master_update_8015() {
  // Camps.
  $camp_ids = \Drupal::entityQuery('node')
    ->condition('type', 'camp')
    ->execute();

  // Create aliases for News & Events pages of existing Camps.
  $suffix = '/about/news__events';
  foreach ($camp_ids as $id) {
    $camp_path = '/node/' . $id;
    $news_events_path = $camp_path . $suffix;
    $camp_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($camp_path);
    $news_events_path_alias = $camp_path_alias . $suffix;
    \Drupal::service('path.alias_storage')->save($news_events_path, $news_events_path_alias, 'en');
  }

  // Camp-related 'News & Events' nodes.
  $nids = \Drupal::entityQuery('node')
    ->condition('title', 'News & Events')
    ->condition('field_related.target_id', $camp_ids, 'IN')
    ->execute();

  // Remove nodes.
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $storage->loadMultiple($nids);
  $storage->delete($nodes);
}

/**
 * Test PUSH_MIGRATE_UPDATE_TO_PROD job.
 */
function ymca_master_update_8016() {
  $env = 'default';
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $env = 'Acquia';
  }
  \Drupal::logger('ymca_master')
    ->info('Hello! Current environment is: %env.', ['%env' => $env]);
}

/**
 * Fix menu_link_content links.
 *
 * Current architecture implies running the migration of menu_link_content
 * entities before the pages migration. So, menu_link_content entities
 * do not know anything about node ids. That's why this code should be run after
 * the migration of the second dump.
 */
function ymca_master_update_8017() {
  module_load_include('php', 'ymca_master', 'include/helper');
  ymca_fix_menu_link_content();
}

/**
 * Enable Membership block by default.
 */
function ymca_master_update_8018() {
  $map = [
    'node__field_membership_block' => 'field_membership_block_value',
    'node_revision__field_membership_block' => 'field_membership_block_value',
    'node__field_include_general_blog_posts' => 'field_include_general_blog_posts_value',
    'node_revision__field_include_general_blog_posts' => 'field_include_general_blog_posts_value',
  ];
  foreach ($map as $table => $column) {
    db_update($table)
      ->fields(array($column => 1))
      ->execute();
  }
}

/**
 * Update camp migrations.
 */
function ymca_master_update_8019() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $ignore = Drupal::config('ymca_migrate.settings')->get('ignore');

  // We should remove all blocks created by previous before running migration update.
  $remove = [
    'date_block',
    'expander_block',
    'image_block',
    'promo_block',
    'slide_show',
    'slide_show_item',
  ];

  $ids = \Drupal::entityQuery('block_content')
    ->condition('type', $remove, 'IN')
    ->condition('id', $ignore['block_content'], 'NOT IN')
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $blocks = $storage->loadMultiple($ids);
  $storage->delete($blocks);

  // Run migrations update.
  ymca_run_migration('ymca_migrate_node_blog', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_camp', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_location', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_page', TRUE, TRUE);

  // Run some content fixes.
  ymca_master_update_8015();
  ymca_master_update_8017();
  ymca_master_update_8018();
}

/**
 * Fix trailing slashes issue.
 */
function ymca_master_update_8020() {
  $db = Database::getConnection();
  $query = $db->select('url_alias', 'ua')
    ->fields('ua', ['source', 'alias'])
    ->execute();

  /** @var \Drupal\redirect\RedirectRepository $repo */
  $repo = \Drupal::service('redirect.repository');
  while ($alias = $query->fetchObject()) {
    if (substr($alias->alias, -1, 1) !== '/') {
      $source_path = ltrim($alias->alias . '/', '/');
      try {
        if (!$repo->findMatchingRedirect($source_path, [], 'en')) {
          $redirect = Redirect::create();
          $redirect->setSource($source_path);
          $redirect->setRedirect($alias->source);
          $redirect->setLanguage('en');
          $redirect->setStatusCode(\Drupal::config('redirect.settings')->get('default_status_code'));
          $redirect->save();
        }
      }
      catch (RedirectLoopException $e) {
        watchdog_exception('ymca_master', $e);
      }
    }
  }
}

/**
 * Fix trailing slashes for old redirects.
 */
function ymca_master_update_8021() {
  $db = Database::getConnection();
  $query = $db->select('redirect', 'r')
    ->fields('r', [
      'redirect_source__path',
      'redirect_redirect__uri',
    ])
    ->condition('r.redirect_redirect__uri', $db->escapeLike('internal:') . '%', 'LIKE')
    ->condition('r.redirect_source__path', '%' . $db->escapeLike('/'), 'NOT LIKE')
    ->execute();

  $repo = \Drupal::service('redirect.repository');
  $alias_manager = \Drupal::service('path.alias_manager');

  while ($old = $query->fetchObject()) {
    $uri = $old->redirect_redirect__uri;
    $source_path = $old->redirect_source__path . '/';
    if ($destination = $alias_manager->getPathByAlias(str_replace('internal:', '', $uri), 'en')) {
      try {
        if (!$repo->findMatchingRedirect($source_path, [], 'en')) {
          $redirect = Redirect::create();
          $redirect->setSource($source_path);
          $redirect->setRedirect($destination);
          $redirect->setLanguage('en');
          $redirect->setStatusCode(Drupal::config('redirect.settings')->get('default_status_code'));
          $redirect->save();
        }
      }
      catch (RedirectLoopException $e) {
        watchdog_exception('ymca_master', $e);
      }
    }
  }
}

/**
 * Fix redundant configs.
 */
function ymca_master_update_8022() {
  Drupal::configFactory()->getEditable('stage_file_proxy.settings')->delete();
  Drupal::configFactory()->getEditable('devel.settings')->delete();
}

/**
 * Enable YMCA Membership module.
 */
function ymca_master_update_8023() {
  \Drupal::service('module_installer')->install(array('ymca_membership'), TRUE);
}

/**
 * Run files migration.
 */
function ymca_master_update_8024() {
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    ini_set('memory_limit', '2048M');
    $dir = DRUPAL_ROOT . '/' . PublicStream::basePath() . '/cache';
    $config = \Drupal::service('config.factory')->getEditable('ymca_migrate.settings');
    $config->set('cache_dir', $dir);
    $config->save();
  }

  module_load_include('php', 'ymca_master', 'include/helper');
  ymca_run_migration('ymca_migrate_file_image', TRUE, TRUE);
}

/**
 * Run migration for 2nd dump.
 */
function ymca_master_update_8025() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $ignore = Drupal::config('ymca_migrate.settings')->get('ignore');

  // We should remove all blocks created by previous before running migration update.
  $remove = [
    'date_block',
    'expander_block',
    'image_block',
    'promo_block',
    'slide_show',
    'slide_show_item',
  ];

  $ids = \Drupal::entityQuery('block_content')
    ->condition('type', $remove, 'IN')
    ->condition('id', $ignore['block_content'], 'NOT IN')
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $blocks = $storage->loadMultiple($ids);
  $storage->delete($blocks);

  // Run migrations update.
  $migrations = [
    'ymca_migrate_block_content_code_block',
    'ymca_migrate_menu_link_content_main',
    'ymca_migrate_menu_link_content_camps',
    'ymca_migrate_menu_link_content_child_care_preschool',
    'ymca_migrate_menu_link_content_health_fitness',
    'ymca_migrate_menu_link_content_jobs_suppliers_news',
    'ymca_migrate_menu_link_content_kid_teen_activities',
    'ymca_migrate_menu_link_content_locations',
    'ymca_migrate_menu_link_content_swimming',
    'ymca_migrate_menu_link_content_our_cause',
    'ymca_migrate_menu_link_content_redirect',
    'ymca_migrate_node_blog',
    'ymca_migrate_node_page',
    'ymca_migrate_node_camp',
    'ymca_migrate_node_location',
    'ymca_migrate_node_location_schedule',
    'ymca_migrate_redirect',
    'ymca_migrate_url_alias_page',
    'ymca_migrate_url_alias_blog',
    'ymca_migrate_url_alias_camp',
    'ymca_migrate_url_alias_location',
    'ymca_migrate_url_alias_location_schedule',
    'ymca_migrate_taxonomy_term_tags',
    'ymca_migrate_url_alias_tags',
  ];

  foreach ($migrations as $item) {
    ymca_run_migration($item, TRUE, TRUE);
  }

  // Run some content fixes.
  ymca_master_update_8015();
  ymca_master_update_8017();
  ymca_master_update_8018();
  ymca_master_update_8020();
  ymca_master_update_8021();
}

/**
 * Update location titles.
 */
function ymca_master_update_8026() {
  $mappings = \Drupal::config('ymca_groupex.mapping')->get('locations');
  foreach ($mappings as $item) {
    if ($node = Node::load($item['entity_id'])) {
      $node->setTitle($item['name']);
      $node->save();
    }
  }
}

/**
 * Remove all Locations-related 'News & Events' nodes.
 */
function ymca_master_update_8027() {
  // Locations.
  $loc_ids = \Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->execute();

  // Create aliases for News & Events pages of existing Locations.
  $suffix = '/about/news__events';
  foreach ($loc_ids as $id) {
    $loc_path = '/node/' . $id;
    $news_events_path = $loc_path . $suffix;
    $loc_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($loc_path);
    $news_events_path_alias = $loc_path_alias . $suffix;
    // Existing News & Events node alias.
    $alias = \Drupal::service('path.alias_storage')->load(['alias' => $news_events_path_alias]);
    $pid = !empty($alias['pid']) ? $alias['pid'] : NULL;
    // Create new alias or update existing.
    \Drupal::service('path.alias_storage')->save($news_events_path, $news_events_path_alias, 'en', $pid);
  }

  // Location-related 'News & Events' nodes.
  $nids = \Drupal::entityQuery('node')
    ->condition('title', 'News & Events')
    ->condition('field_related.target_id', $loc_ids, 'IN')
    ->execute();

  // Update News & Events menu links.
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $storage->loadMultiple($nids);
  foreach ($nodes as $node) {
    $menu_link_info = menu_ui_get_menu_link_defaults($node);
    // Load menu link.
    if (!$menu_link = MenuLinkContent::load($menu_link_info['entity_id'])) {
      \Drupal::logger('ymca_master')->alert(t('Node menu_link found for node %node', array('%node' => $node->id())));
      continue;
    }
    $lnid = $node->field_related->getValue()[0]['target_id'];
    // Update menu link.
    $menu_link->set('link', ['uri' => 'internal:/node/' . $lnid . '/about/news__events']);
    $menu_link->save();
  }

  // Remove News & Events nodes.
  $storage->delete($nodes);
}

/**
 * Install and configure contrib modules.
 */
function ymca_master_update_8028() {
  \Drupal::service('module_installer')->install(array('metatag'), TRUE);
  \Drupal::service('module_installer')->install(
    array('metatag_open_graph'),
    TRUE
  );
  \Drupal::service('module_installer')->install(array('token'), TRUE);
  \Drupal::service('module_installer')->install(
    ['mailsystem', 'mimemail', 'rel_to_abs'],
    TRUE
  );

  $path = drupal_get_path('module', 'ymca_master');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/config/optional/mailsystem.settings.yml',
    $path . '/config/optional/mimemail.settings.yml',
    $path . '/config/optional/filter.format.full_html.yml',
  ]);
}

/**
 * Fix non-replaced tokens.
 */
function ymca_master_update_8029() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $db = Database::getConnection('default');
  $config = \Drupal::service('config.factory')->getEditable('redirect.settings');
  $validator = \Drupal::pathValidator();

  // Do not process redirects on save.
  $config->set('auto_redirect', FALSE);
  $config->save();

  $tables = [
    'block_content__field_block_content',
    'node__field_camp_links',
    'node__field_content',
    'node__field_secondary_sidebar',
    'node__field_sidebar',
    'node__field_summary',
  ];

  $problems = [];
  foreach ($tables as $table) {
    list($entity_type, $field) = explode('__', $table);
    $col = $field . '_value';
    $stmt = $db->select($table, 't')
      ->fields('t')
      ->condition('t.' . $col, '%' . $db->escapeLike('{{internal_page_link_') . '%', 'LIKE')
      ->execute();

    while ($data = $stmt->fetchObject()) {
      $problems[$entity_type][$data->entity_id][] = $field;
    }
  }

  // We've identified problem. Let's process them.
  foreach ($problems as $entity_type => $entities) {
    $storage = \Drupal::getContainer()
      ->get('entity.manager')
      ->getStorage($entity_type);
    foreach ($entities as $entity_id => $fields) {
      /** @var \Drupal\Core\Entity\Entity $entity */
      $entity = $storage->load($entity_id);
      $processed_fields = [];

      foreach ($fields as $field) {
        $replace = FALSE;

        $original = $entity->$field->value;
        preg_match_all('/{{internal_page_link_(\d+)}}/miU', $original, $test);
        if (!empty($test[1])) {
          foreach ($test[1] as $id => $token) {
            // Check each token. If the destination is valid. Add to replace array.
            if ($address = ymca_get_legacy_page_address($token)) {
              if ($validator->isValid($address)) {
                $replace['tokens'][$token] = $test[0][$id];
                $replace['links'][$token] = ltrim($address, '/');
              }
            }
          }
        }

        if ($replace) {
          $processed_fields[$field] = str_replace($replace['tokens'], $replace['links'], $original);
        }
      }

      // Finally, save entity with processed fields.
      foreach ($processed_fields as $field_name => $new_value) {
        $entity->set($field_name, [
          'value' => $new_value,
          'format' => 'full_html',
        ]);
        $entity->save();

        \Drupal::logger('ymca_migrate')->info(
          'Tokens have been successfully replaced in %entity_type:%entity_id.',
          [
            '%entity_type' => $entity_type,
            '%entity_id' => $entity_id,
          ]
        );
      }
    }
  }

  // Restore Redirect settings.
  $config->set('auto_redirect', TRUE);
  $config->save();
}

/**
 * Update locations menu links.
 */
function ymca_master_update_8030() {
  $path = drupal_get_path('module', 'ymca_membership');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/config/install/ymca_membership.config.yml',
  ]);
  // Recreate default membership blocks.
  module_load_include('install', 'ymca_membership', 'ymca_membership');
  ymca_membership_install();

  // Locations.
  $loc_ids = Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->execute();

  $storage = Drupal::entityTypeManager()->getStorage('menu_link_content');
  foreach ($loc_ids as $id) {
    $loc_path = '/node/' . $id;
    $alias = Drupal::service('path.alias_manager')->getAliasByPath($loc_path);
    // Lookup menu links by location alias.
    $query = Drupal::entityQuery('menu_link_content')
      ->condition('link.uri', 'internal:' . $alias)
      ->condition('menu_name', 'locations')
      ->sort('id', 'ASC')
      ->range(0, 1);
    $results = $query->execute();
    if (!$results) {
      continue;
    }
    $menu_link_id = reset($results);
    // Update menu link url, set 'entity:' scheme.
    $menu_link = MenuLinkContent::load($menu_link_id);
    $menu_link->set('link', ['uri' => 'entity:node/' . $id]);
    $menu_link->save();
  }
}

/**
 * Extend ymca_groupex.mapping by machine_name, replace absolute 'Join' links.
 */
function ymca_master_update_8031() {
  // Locations.
  $loc_ids = Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->execute();

  $mapping = Drupal::configFactory()->getEditable('ymca_groupex.mapping');
  $locations = $mapping->get('locations');

  $storage = Drupal::entityTypeManager()->getStorage('menu_link_content');
  foreach ($loc_ids as $nid) {
    $query = Drupal::entityQuery('menu_link_content')
      ->condition('link.uri', 'entity:node/' . $nid)
      ->condition('menu_name', 'locations')
      ->sort('id', 'ASC')
      ->range(0, 1);
    $results = $query->execute();
    if (!$results) {
      continue;
    }
    $menu_link_id = reset($results);
    $menu_link = MenuLinkContent::load($menu_link_id);

    // Search 'Join' link of the location.
    $properties = [
      'title' => 'Join',
      'parent' => 'menu_link_content:' . $menu_link->uuid(),
    ];
    if ($links = $storage->loadByProperties($properties)) {
      $join_link = reset($links);
      $parts = parse_url($join_link->link->getValue()[0]['uri']);
      // Some unfit 'Join' link, skip the location.
      if ($parts['host'] !== 'www.ymcatwincities.org' || $parts['path'] !== '/membership/') {
        continue;
      }
      // Lookup the location in the config.
      $config_row = NULL;
      foreach ($locations as $cid => $location) {
        if ($location['entity_id'] == $nid) {
          $config_row = &$locations[$cid];
          break;
        }
      }
      // Skip if the location isn't found in the config.
      if (!isset($config_row)) {
        continue;
      }

      // Generate machine name if it isn't presented.
      if (!$machine_name = $parts['fragment']) {
        $machine_name = UrlCleaner::clean($config_row['name']);
      }

      // Update config.
      $config_row['machine_name'] = $machine_name;

      // Unlink variable from config row.
      unset($config_row);

      // Update menu link, it shouldn't be absolute anymore.
      $join_link->set('link', ['uri' => 'internal:/membership#' . $machine_name]);
      $join_link->save();
    }
  }

  // Save config.
  $mapping->set('locations', $locations)->save();
}

/**
 * Add missed redirects.
 */
function ymca_master_update_8032() {
  /** @var \Drupal\redirect\RedirectRepository $repo */
  $repo = \Drupal::service('redirect.repository');

  $ids = \Drupal::entityQuery('redirect')
    ->condition('redirect_source__path', '%/southdale_ymca/%', 'LIKE')
    ->execute();

  foreach ($ids as $id) {
    /** @var Redirect $existing_alias */
    $existing_alias = $repo->load($id);

    /** @var Redirect $redirect */
    $redirect = Redirect::create();
    $source = preg_replace("/^build\d+\/(.*)/", "$1", $existing_alias->getSourceUrl());
    $redirect->setSource(str_replace('/southdale_ymca/', '/southdale_ymca_edina/', $source));
    $redirect->setRedirect($source);
    $redirect->setLanguage('en');
    $redirect->setStatusCode(Drupal::config('redirect.settings')->get('default_status_code'));
    try {
      $redirect->save();
    }
    catch (\Exception $e) {
      watchdog_exception(__FUNCTION__, $e);
    }
  }
}

/**
 * Add ymca_hours services.
 */
function ymca_master_update_8033() {
  $path = drupal_get_path('module', 'ymca_hours');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/ymca_hours.services.yml',
  ]);
}

/**
 * Import configs.
 */
function ymca_master_update_8034() {
  $path = drupal_get_path('module', 'ymca_master') . '/config/optional/contact_water_safety/';
  \Drupal::service('config_import.importer')->importConfigs([
    $path . 'contact.form.contact_water_safety.yml',
    $path . 'core.entity_form_display.contact_message.contact_water_safety.default.yml',
    $path . 'core.entity_view_display.contact_message.contact_water_safety.default.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_comments.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_email_address.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_first_name.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_label.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_last_name.yml',
    $path . 'field.field.contact_message.contact_water_safety.field_response_required.yml',
  ]);
}

/**
 * Add day camps features.
 */
function ymca_master_update_8035() {
  \Drupal::service('module_installer')->install(['ymca_day_camp'], TRUE);

  // Remove day_camp_news node.
  $node = \Drupal::getContainer()
    ->get('entity.manager')
    ->getStorage('node')
    ->load(491);
  $node->delete();

  // Remove the alias.
  $db = Database::getConnection();
  $db->delete('url_alias')
    ->condition('alias', '/day_camp_news')
    ->execute();
}

/**
 * YMCA-600 Url aliases clean up.
 */
function ymca_master_update_8036() {
  $db = Database::getConnection();

  // Delete full duplicates.
  $s = $db->select('url_alias', 'u')
    ->fields('u', ['alias', 'source', 'langcode']);
  $s->addExpression('min(pid)', 'minpid');
  $res = $s->groupBy('source')
    ->groupBy('alias')
    ->groupBy('langcode')
    ->having('count(*) > 1')
    ->execute()
    ->fetchAll();

  $dup_count = 0;
  foreach ($res as $r) {
    $dup_count += $db->delete('url_alias')
      ->condition('alias', $r->alias)
      ->condition('source', $r->source)
      ->condition('langcode', $r->langcode)
      ->condition('pid', $r->minpid, '<>')
      ->execute();
  }
  Drupal::logger('ymca_master')->info('%dc duplicated aliases have been removed', ['%dc' => $dup_count]);

  // Delete aliases of deleted nodes.
  $s = $db->select('url_alias', 'u')
    ->fields('u', ['pid']);
  $s->leftJoin('node', 'n', 'CONCAT(:prefix, n.nid) = u.source', [':prefix' => '/node/']);
  $r = $s->isNull('n.nid')
    ->condition('u.source', '/node/%', 'LIKE')
    ->condition('u.source', '/node/%/%', 'NOT LIKE')
    ->execute()
    ->fetchAllKeyed(0, 0);

  $orfaned = $db->delete('url_alias')
    ->condition('pid', $r, 'IN')
    ->execute();
  Drupal::logger('ymca_master')->info('%o orfaned aliases have been removed.', ['%o' => $orfaned]);

  // Delete nodes and aliases, that were replaced by custom pages.
  $nodes_to_be_deleted = [];
  $node_storage = Drupal::entityTypeManager()->getStorage('node');
  $dups = $db->select('url_alias', 'u')
    ->fields('u', ['alias'])
    ->groupBy('u.alias')
    ->having('count(*) > 1')
    ->execute()
    ->fetchAll();

  foreach ($dups as $dup) {
    $s = $db->select('url_alias', 'u')
      ->fields('u', ['pid', 'source'])
      ->condition('alias', $dup->alias)
      ->execute()
      ->fetchAllKeyed();
    // List nodes that are using this aliase.
    $nodes = [];
    foreach ($s as $pid => $source) {
      if (preg_match('/\/node\/(\d+)$/', $source, $match)) {
        $nodes[$pid] = $match[1];
      }
    }
    if (count($s) == count($nodes)) {
      Drupal::logger('ymca_master')
        ->info('Manually resolve alias conficts of these nodes: %nids', ['%nids' => implode(', ', $nodes)]);
    }
    else {
      // These nodes should be removed.
      foreach ($nodes as $pid => $nid) {
        $node = $node_storage->load($nid);
        // Check if the node is in menu tree.
        $query = \Drupal::entityQuery('menu_link_content')
          ->condition('link.uri', 'entity:node/' . $node->id())
          ->sort('id', 'ASC')
          ->range(0, 1);
        $result = $query->execute();
        if ($result) {
          // Unlink node from menu tree.
          $menu_link_id = reset($result);
          $menu_link = MenuLinkContent::load($menu_link_id);
          $menu_link->set('link', ['uri' => 'internal:' . $dup->alias]);
          $menu_link->save();
        }
        $nodes_to_be_deleted[] = $node;
      };
      if ($nodes) {
        // Delete aliases of nodes to be deleted.
        $pids = array_keys($nodes);
        $orfaned = $db->delete('url_alias')
          ->condition('pid', $pids, 'IN')
          ->execute();
        Drupal::logger('ymca_master')
          ->info('%o orfaned aliases have been removed.', ['%o' => $orfaned]);
      }
    }
  }
  $node_storage->delete($nodes_to_be_deleted);
  Drupal::logger('ymca_master')
    ->info('%d nodes have been deleted since they were replaced with custom pages', ['%d' => count($nodes_to_be_deleted)]);

  // Search orfaned redirects.
  $s = $db->select('redirect', 'r')
    ->fields('r', ['rid']);
  $s->leftJoin('node', 'n', "CONCAT('internal:/node/', n.nid) = redirect_redirect__uri");
  $s->condition('redirect_redirect__uri', 'internal:/node/%', 'LIKE')
    ->condition('redirect_redirect__uri', 'internal:/node/%/%', 'NOT LIKE')
    ->isNull('n.nid');
  $rids = $s->execute()->fetchAllKeyed(0, 0);

  // Remove them.
  if ($rids) {
    $orfaned_redirects_deleted = $db->delete('redirect')
      ->condition('rid', $rids, 'IN')
      ->execute();
    Drupal::logger('ymca_master')
      ->info('%d orfaned redirects have been deleted', ['%d' => $orfaned_redirects_deleted]);
  }
}

/**
 * Fix embed entities code.
 */
function ymca_master_update_8037() {
  $db = Database::getConnection('default');
  $config = \Drupal::service('config.factory')->getEditable('redirect.settings');

  // Do not process redirects on save.
  $config->set('auto_redirect', FALSE);
  $config->save();

  $tables = [
    'block_content__body',
    'block_content__field_block_content',
    'block_content__field_content_date_before',
    'block_content__field_content_date_between',
    'block_content__field_content_date_end',
    'node__field_content',
    'node__field_lead_description',
    'node__field_secondary_sidebar',
    'node__field_sidebar',
    'node__field_summary',
  ];

  // Let's build a full list of embeds.
  $embeds = [];
  foreach ($tables as $table) {
    list($entity_type, $field) = explode('__', $table);
    $col = $field . '_value';

    $result = $db->select($table, 't')->fields('t')
      ->condition('t.' . $col, '%' . $db->escapeLike('drupal-entity') . '%', 'LIKE')
      ->execute();

    while ($data = $result->fetchObject()) {
      $embeds[$entity_type][$data->entity_id][] = $field;
    }
  }

  // Loop ove each embed and fix the problem.
  foreach ($embeds as $entity_type => $entities) {
    $storage = \Drupal::getContainer()
      ->get('entity.manager')
      ->getStorage($entity_type);
    foreach ($entities as $entity_id => $fields) {
      $entity = $storage->load($entity_id);
      $processed_fields = [];

      foreach ($fields as $field) {
        if ($entity->hasField($field)) {
          $original = $entity->$field->value;
          $replace = FALSE;

          // Find all embeds that need to be replaced.
          preg_match_all('/<drupal-entity.*data-embed-button=\"(?:menu_link|file)\".*><\/drupal-entity>/miU', $original, $test);
          if (empty($test[0])) {
            continue;
          }

          // Create map for str_replace.
          foreach ($test[0] as $embed) {
            $replace['from'][] = $embed;
            $replace['to'][] = str_replace('drupal-entity', 'drupal-entity-inline', $embed);
          }

          if ($replace) {
            $processed_fields[$field] = str_replace($replace['from'], $replace['to'], $original);
          }
        }
      }

      // Finally, save entity with processed fields.
      foreach ($processed_fields as $field_name => $new_value) {
        $entity->set($field_name, [
          'value' => $new_value,
          'format' => 'full_html',
        ]);
        $entity->save();

        \Drupal::logger('ymca_master')->info(
          'Replaced drupal-entity with drupal-entity-inline in %entity_type:%entity_id.',
          [
            '%entity_type' => $entity_type,
            '%entity_id' => $entity_id,
          ]
        );
      }
    }
  }

  // Restore Redirect settings.
  $config->set('auto_redirect', TRUE);
  $config->save();
}

/**
 * Webforms bug fixing.
 */
function ymca_master_update_8038() {
  Drupal::configFactory()->getEditable('views.view.contact_messages')->delete();
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Import configs.
 */
function ymca_master_update_8039() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/views.view.day_camp_news.yml',
  ]);
}

/**
 * Import configs.
 */
function ymca_master_update_8040() {
  drupal_flush_all_caches();
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/contact.form.contact_an_aquatics_manager.yml',
    'sites/default/config/staging/views.view.contact_messages.yml',
  ]);

  // Set thank you page alias.
  $contact_form = \Drupal::entityTypeManager()
    ->getStorage('contact_form')
    ->load('contact_an_aquatics_manager');
  $path_info = $contact_form->getSubmissionPagePath();
  \Drupal::service('path.alias_storage')->save($path_info['source'], '/swimming/contact_an_aquatics_manager/thank_you', 'en');
}

/**
 * Fix mismatched fields.
 */
function ymca_master_update_8041() {
  drupal_flush_all_caches();

  // We'll just parse getChangeSummary() method in order not to override the service.
  $summary = \Drupal::entityDefinitionUpdateManager()->getChangeSummary();
  $list = [];
  foreach ($summary as $entity_type => $items) {
    foreach ($items as $item) {
      // Get file name.
      $arg = $item->getArguments();
      $data = reset($arg);
      $explode = explode('.', $data);
      $field_name = $explode[1];

      // Get operation. By default assume update.
      $operation = FALSE;
      $ops = [
        EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED => 'Create',
        EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED => 'Update',
        EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED => 'Delete',
      ];
      foreach ($ops as $id => $op) {
        if (strpos($item->getUntranslatedString(), $op) !== FALSE) {
          $operation = $id;
        }
      }

      $list[$entity_type]['field_storage_definitions'][$field_name] = $operation;
    }
  }

  $entity_manager = \Drupal::service('entity.manager');
  $db = Database::getConnection();

  foreach ($list as $entity_type_id => $change_list) {
    if (!empty($change_list['field_storage_definitions'])) {
      $storage_definitions = $entity_manager->getFieldStorageDefinitions($entity_type_id);
      $original_storage_definitions = $entity_manager->getLastInstalledFieldStorageDefinitions($entity_type_id);

      foreach ($change_list['field_storage_definitions'] as $field_name => $change) {
        $storage_definition = isset($storage_definitions[$field_name]) ? $storage_definitions[$field_name] : NULL;
        $original_storage_definition = isset($original_storage_definitions[$field_name]) ? $original_storage_definitions[$field_name] : NULL;

        $table = $entity_type_id . '__' . $field_name;
        $config = 'field.storage.' . $entity_type_id . '.' . $field_name;

        try {
          switch ($change) {
            case EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED:
              $entity_manager->onFieldStorageDefinitionCreate($storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED:
              // Remove active config and re-import if DB table not found.
              if ($db->schema()->tableExists($table) == FALSE) {
                $active_config = Drupal::configFactory()->getEditable($config);
                if ($active_config) {
                  $active_config->delete();
                }

                $config_file = DRUPAL_ROOT . '/sites/default/config/staging/' . $config . '.yml';
                if (file_exists($config_file)) {
                  \Drupal::service('config_import.importer')->importConfigs([
                    'sites/default/config/staging/' . $config . '.yml',
                  ]);
                }
              }
              $entity_manager->onFieldStorageDefinitionUpdate($storage_definition, $original_storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED:
              $entity_manager->onFieldStorageDefinitionDelete($original_storage_definition);
              break;
          }
        }
        catch (Exception $e) {
          watchdog_exception('ymca_master', $e);
        }
      }
    }
  }
}

/**
 * Remove broken fields.
 */
function ymca_master_update_8042() {
  drupal_flush_all_caches();

  $fields = [
    'field_category_class' => [
      'contact_message.become_a_supplier',
    ],
    'field_vendor_portal' => [
      'contact_message.become_a_supplier',
    ],
    'field_type_of_membership' => [
      'contact_message.cc_wellness_employee',
      'contact_message.individual_location_free_trial',
    ],
    'field_preferred_y_l_text' => [
      'contact_message.cc_wellness_employee',
      'contact_message.journey_to_freedom',
    ],
    'field_childcare_location' => [
      'contact_message.contact_a_program_director',
    ],
    'field_what_is_your_preferred_y_l' => [
      'contact_message.contact_an_aquatics_manager',
      'contact_message.membership_form',
      'contact_message.personal_training_main',
    ],
  ];

  foreach ($fields as $field_name => $usages) {
    $field_storage_definition = 'field.storage.contact_message.' . $field_name;

    foreach ($usages as $usage) {
      $field_definition = 'field.field.' . $usage . '.' . $field_name;

      foreach (['entity_view_display', 'entity_form_display'] as $item) {
        $config = Drupal::configFactory()->getEditable('core.' . $item . '.' . $usage . '.default');
        $data = $config->get();
        foreach ($data['dependencies']['config'] as $id => $dependency) {
          if ($field_definition == $dependency) {
            unset($data['dependencies']['config'][$id]);
            break;
          }
        }
        unset($data['content'][$field_name]);

        $config->setData($data);
        $config->save();
      }

      // Remove field definition.
      \Drupal::configFactory()->getEditable($field_definition)->delete();
    }

    // Remove field storage.
    \Drupal::configFactory()->getEditable($field_storage_definition)->delete();
  }

}

/**
 * Cleanup wedged field configs.
 */
function ymca_master_update_8043() {
  // Remove all test contact messages.
  $ids = \Drupal::entityQuery('contact_message')->execute();
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('contact_message');
  $messages = $storage->loadMultiple($ids);
  $storage->delete($messages);

  // Manually remove wedged fields.
  $fields = [
    'field_childcare_location' => [
      'contact_message.contact_a_program_director',
    ],
    'field_y_location_email' => [
      'contact_message.contact_an_aquatics_manager',
      'contact_message.membership_form',
    ],
  ];

  foreach ($fields as $field_name => $usages) {
    $field_storage_definition = 'field.storage.contact_message.' . $field_name;

    foreach ($usages as $usage) {
      $field_definition = 'field.field.' . $usage . '.' . $field_name;

      foreach (['entity_view_display', 'entity_form_display'] as $item) {
        $config = Drupal::configFactory()->getEditable('core.' . $item . '.' . $usage . '.default');
        $data = $config->get();
        foreach ($data['dependencies']['config'] as $id => $dependency) {
          if ($field_definition == $dependency) {
            unset($data['dependencies']['config'][$id]);
            break;
          }
        }
        unset($data['content'][$field_name]);

        $config->setData($data);
        $config->save();
      }

      // Remove field definition.
      \Drupal::configFactory()->getEditable($field_definition)->delete();
    }

    // Remove field storage.
    \Drupal::configFactory()->getEditable($field_storage_definition)->delete();
  }

  // Additional cleaning.
  $clean = [
    'field_type_of_membership',
    'field_preferred_y_l_text',
    'field_what_is_your_preferred_y_l',
    'field_childcare_location',
    'field_y_location_email',
  ];

  // Clean field definitions.
  $storage = \Drupal::keyValue('entity.definitions.installed');
  $data = $storage->get('contact_message.field_storage_definitions');
  foreach ($clean as $item) {
    unset($data[$item]);
  }
  $storage->set('contact_message.field_storage_definitions', $data);

  // Clean storage schema.
  $storage = \Drupal::keyValue('entity.storage_schema.sql');
  foreach ($clean as $item) {
    $storage->delete('contact_message.field_schema_data.' . $item);
  }

  // Clean bundle field map.
  $storage = \Drupal::keyValue('entity.definitions.bundle_field_map');
  $data = $storage->get('contact_message');
  foreach ($clean as $item) {
    unset($data[$item]);
  }
  $storage->set('contact_message', $data);

  // Clean field deleted state.
  $storage = \Drupal::keyValue('state');
  $data = $storage->get('field.field.deleted');
  foreach ($clean as $item) {
    foreach ($data as $id => $field) {
      if ($field['field_name'] == $item) {
        unset($data[$id]);
      }
    }
  }
  $storage->set('field.field.deleted', $data);
}

/**
 * Update membership page fields.
 */
function ymca_master_update_8044() {
  $path = drupal_get_path('module', 'ymca_membership');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/config/install/ymca_membership.config.yml',
  ]);
}

/**
 * Update not migrated blocks with entity embed data.
 */
function ymca_master_update_8045() {
  $data = [
    12319 => ['id' => 11016, 'uuid' => 'c12b4948-f083-4a58-a201-1bb81dff45b3'],
    12318 => ['id' => 11031, 'uuid' => '4a3aa4c7-4fcf-47a9-8b51-818317d79f01'],
    12315 => ['id' => 11036, 'uuid' => '1ecc4d72-2c24-4395-9b07-7c38ca7cf0d9'],
    12317 => ['id' => 11041, 'uuid' => '32935da1-e1c6-462a-8200-e8f0a12e683d'],
    12320 => ['id' => 11051, 'uuid' => '7196df40-8b97-4a51-9800-d4e7b2e85a17'],
    12321 => ['id' => 11056, 'uuid' => '9deb5b81-8382-4db1-9621-333c530de353'],
    12314 => ['id' => 11061, 'uuid' => '41f01ea7-aff5-4fc4-9f09-9cc4976609a9'],
    12322 => ['id' => 11066, 'uuid' => '5d8054cf-51aa-4aa7-9b04-4c603bbe6b0b'],
    12323 => ['id' => 11071, 'uuid' => 'ed84887b-162b-419b-9200-c3f3a5556de4'],
    12316 => ['id' => 11026, 'uuid' => 'a606769f-b24a-4d57-8907-7b4ff5ba32ec'],
  ];

  $db = Database::getConnection('default');
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('node');
  $config = \Drupal::service('config.factory')->getEditable('redirect.settings');

  // Do not process redirects on save.
  $config->set('auto_redirect', FALSE);
  $config->save();

  $table = 'node__field_sidebar';
  $field = str_replace('node__', '', $table);
  $col = $field . '_value';

  foreach ($data as $block_id => $replace_data) {
    $search = '<div class="richtext original">' . $block_id . '</div>';
    $stmt = $db->select($table, 's')
      ->fields('s', ['entity_id', $col])
      ->condition($col, '%' . $db->escapeLike($search) . '%', 'LIKE')
      ->execute();

    foreach ($stmt as $item) {
      if (!$entity = $storage->load($item->entity_id)) {
        continue;
      }

      if (!$entity->hasField($field)) {
        continue;
      }

      $subject = $entity->$field->value;
      $replace = '<div class="richtext original"><drupal-entity data-align="none" data-embed-button="block" data-entity-embed-display="entity_reference:entity_reference_entity_view" data-entity-embed-settings="{&quot;view_mode&quot;:&quot;default&quot;}" data-entity-id="' . $replace_data['id'] . '" data-entity-label="Block" data-entity-type="block_content" data-entity-uuid="' . $replace_data['uuid'] . '"></drupal-entity></div>';

      $value = str_replace($search, $replace, $subject);
      $entity->set($field, [
        'value' => $value,
        'format' => 'full_html',
      ]);
      $entity->save();

      \Drupal::logger('ymca_master')->info(
        'Replaced non-migrated sidebar block with embed data in node %node.',
        ['%node' => $item->entity_id]
      );
    }
  }

  // Restore Redirect settings.
  $config->set('auto_redirect', TRUE);
  $config->save();
}

/**
 * Update config.
 */
function ymca_master_update_8046() {
  $path = drupal_get_path('module', 'ymca_alters');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/config/optional/ymca_alters.config.yml',
  ]);
}

/**
 * Install captcha.
 */
function ymca_master_update_8047() {
  \Drupal::service('module_installer')->install(['captcha', 'image_captcha'], TRUE);
}

/**
 * Update config.
 */
function ymca_master_update_8048() {
  $path = drupal_get_path('module', 'ymca_alters');
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . '/config/optional/ymca_alters.config.yml',
    ]
  );
}

/**
 * Install ymca_cron.
 */
function ymca_master_update_8049() {
  \Drupal::service('module_installer')->install(['ymca_cron'], TRUE);
}

/**
 * Fix youtube protocol.
 */
function ymca_master_update_8050() {
  $db = Database::getConnection('default');
  $storage = \Drupal::service('entity.manager')->getStorage('block_content');

  $table = 'block_content__field_code';
  $field = str_replace('block_content__', '', $table);
  $col = $field . '_value';
  $search = 'src="//www.youtube.com';
  $replace = 'src="http://www.youtube.com';

  $result = $db->select($table, 'c')
    ->fields('c', ['entity_id', $col])
    ->condition($col, '%' . $db->escapeLike($search) . '%', 'LIKE')
    ->execute();

  foreach ($result as $item) {
    if (!$entity = $storage->load($item->entity_id)) {
      continue;
    }

    if (!$entity->hasField($field)) {
      continue;
    }

    $subject = $entity->$field->value;
    $entity->set($field, [
      'value' => str_replace($search, $replace, $subject),
      'format' => 'full_html',
    ]);
    $entity->save();

    \Drupal::logger('ymca_master')->info(
      'Replaced youtube protocol in block %block.',
      ['%block' => $item->entity_id]
    );
  }
}

/**
 * Add shield alternative config.
 */
function ymca_master_update_8051() {
  $path = drupal_get_path('module', 'ymca_alters');
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . '/config/optional/ymca_alters.shield.yml',
    ]
  );
}

/**
 * Fix page config.
 */
function ymca_master_update_8052() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/node.type.article.yml',
  ]);
}

/**
 * Add missing redirects.
 */
function ymca_master_update_8053() {
  $items = [
    'all_y_schedules',
    'camps/family_camp_365',
    'camps/ymca_day_camp',
    'camps/ymca_family_camp',
    'camps/ymca_teen_wilderness',
    'health__fitness/active_older_adults/news_and_schedules_for_active_older_adults',
    'health__fitness/free_group_exercise_classes',
    'health__fitness/personal_training',
    'health__fitness/trainer-led_classes/kettlebells_advanced',
    'health__fitness/trainer-led_classes/kettlebells_beginner',
    'health__fitness/trainer-led_classes/kettlebells_intermediate',
    'health__fitness/yrun',
    'locations',
    'membership',
  ];

  $repo = \Drupal::service('redirect.repository');
  foreach ($items as $item) {
    $source_path = ltrim($item . '/');
    if (!$repo->findMatchingRedirect($source_path, [], 'en')) {
      $redirect = Redirect::create();
      $redirect->setSource($source_path);
      $redirect->setRedirect($item);
      $redirect->setLanguage('en');
      $redirect->setStatusCode(301);
      $redirect->save();
    }
  }
}

/**
 * Fix metatag config.
 */
function ymca_master_update_8054() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/metatag.metatag_defaults.global.yml',
    'sites/default/config/staging/metatag.metatag_defaults.node.yml',
  ]);
}

/**
 * Install parent_404 module.
 */
function ymca_master_update_8055() {
  \Drupal::service('module_installer')->install(['parent_404'], TRUE);
}

/**
 * Fix non-replaced /_asset/ links.
 */
function ymca_master_update_8056() {
  $entity_type_id = 'node';
  $db = Database::getConnection('default');
  $storage = \Drupal::service('entity.manager')->getStorage($entity_type_id);

  $tables = [
    'node__field_content',
    'node__field_sidebar',
    'node__field_summary',
  ];

  foreach ($tables as $table) {
    $field = str_replace($entity_type_id . '__', '', $table);
    $col = $field . '_value';

    $result = $db->select($table, 'c')
      ->fields('c', ['entity_id', $col])
      ->condition($col, '%' . $db->escapeLike('/_asset/') . '%', 'LIKE')
      ->execute();

    foreach ($result as $item) {
      $replace = [];

      if (!$entity = $storage->load($item->entity_id)) {
        continue;
      }

      if (!$entity->hasField($field)) {
        continue;
      }

      $subject = $entity->$field->value;
      preg_match_all("/\/_asset\/\w{6}\/(?:[^.]*.\w{3,4})/", $subject, $test);
      if (empty($test) || empty($test[0])) {
        continue;
      }

      foreach ($test[0] as $index => $matched) {
        $parts = explode('/', $matched);
        $filename = array_pop($parts);

        // Check whether the file exists...
        $test_file = \Drupal::entityQuery('file')
          ->condition('filename', $filename)
          ->execute();

        if (!$test_file) {
          \Drupal::logger('ymca_master')->notice(
            'File not found while replacing non-migrated /_asset/ links in %entity_type_id %entity_id.',
            [
              '%entity_type_id' => $entity_type_id,
              '%entity_id' => $entity->id(),
            ]
          );
          continue;
        }

        $replace['from'][] = $test[0][$index];
        $replace['to'][] = '/sites/default/files/' . $filename;
      }

      if (empty($replace)) {
        continue;
      }

      $entity->set($field, [
        'value' => str_replace($replace['from'], $replace['to'], $subject),
        'format' => $entity->$field->format,
      ]);

      $entity->save();

      \Drupal::logger('ymca_master')->info(
        'Replaced non-migrate asset links in %entity_type_id %entity_id.',
        [
          '%entity_type_id' => $entity_type_id,
          '%entity_id' => $entity->id(),
        ]
      );
    }
  }
}

/**
 * Remove comment module.
 */
function ymca_master_update_8057() {
  $factory = \Drupal::configFactory();
  $installer = Drupal::service('module_installer');

  $remove = [
    'field.storage.comment.comment_body',
    'field.field.comment.comment.comment_body',
    'field.storage.node.comment',
  ];

  foreach ($remove as $name) {
    $factory->getEditable($name)->delete();
  }

  $installer->uninstall(['comment'], TRUE);
}

/**
 * Remove comment module.
 */
function ymca_master_update_8058() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/core.entity_view_display.node.article.default.yml',
  ]);
}

/**
 * Fix /sso_sign_out redirect.
 */
function ymca_master_update_8059() {
  // Remove old one.
  $repo = \Drupal::service('redirect.repository');
  $result = $repo->findBySourcePath('sso_sign_out');
  if (!empty($result)) {
    $redirect = reset($result);
    $redirect->delete();
  }

  // Add new one.
  $redirect = Redirect::create();
  $redirect->setSource('sso_sign_out');
  $redirect->setRedirect('/');
  $redirect->setLanguage('en');
  $redirect->setStatusCode(301);
  $redirect->save();
}

/**
 * Fix duplicate blog posts.
 */
function ymca_master_update_8060() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/views.view.ymca_twin_cities_blog.yml',
    'sites/default/config/staging/views.view.ymca_twin_cities_blog_archive.yml',
  ]);
}

/**
 * Fix trailing slashes issue.
 */
function ymca_master_update_8061() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/redirect.settings.yml',
  ]);
}

/**
 * Make working hours field required.
 */
function ymca_master_update_8062() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/field.field.node.location.field_working_hours.yml',
  ]);
}

/**
 * Update field config.
 */
function ymca_master_update_8063() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/field.field.contact_message.contact_a_program_director.field_label.yml',
  ]);
}

/**
 * Fix comment dependencies.
 */
function ymca_master_update_8064() {
  $installer = \Drupal::service('module_installer');
  $installer->install(['comment'], TRUE);
  field_cron();
  $installer->uninstall(['comment'], TRUE);
}

/**
 * Remove day camp posts from blog & blog archive.
 */
function ymca_master_update_8065() {
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/views.view.ymca_twin_cities_blog.yml',
    'sites/default/config/staging/views.view.ymca_twin_cities_blog_archive.yml',
  ]);
}

/**
 * Uninstall ymca_cron.
 */
function ymca_master_update_8066() {
  \Drupal::service('module_installer')->uninstall(['ymca_cron'], TRUE);
}

/**
 * Install config for managing page with winners.
 */
function ymca_master_update_8067() {
  $path = drupal_get_path('module', 'ymca_frontend');
  \Drupal::service('config_import.importer')->importConfigs([
    $path . '/config/install/ymca_frontend.retention.yml',
  ]);
}

/**
 * Remove main menu link items.
 */
function ymca_master_update_8068() {
  $query = Drupal::entityQuery('menu_link_content')
    ->condition('menu_name', 'main');
  $results = $query->execute();

  // Remove links.
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $links = $storage->loadMultiple($results);
  $storage->delete($links);
}

/**
 * Extend working hours block.
 */
function ymca_master_update_8069() {
  \Drupal::service('module_installer')->install(['ymca_field_custom_hours'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs([
    $path . 'core.entity_form_display.block_content.working_hours_block.default.yml',
    $path . 'core.entity_view_display.block_content.working_hours_block.default.yml',
    $path . 'core.extension.yml',
    $path . 'field.field.block_content.working_hours_block.field_custom_hours.yml',
    $path . 'field.storage.block_content.field_custom_hours.yml',
  ]);
}

/**
 * Add custom routes canonical config.
 */
function ymca_master_update_8070() {
  $path = drupal_get_path('module', 'ymca_alters');
  \Drupal::service('config_import.importer')->importConfigs(
    [$path . '/config/optional/ymca_alters.config.yml']
  );
}

/**
 * Update phone.
 */
function ymca_master_update_8071() {

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs([
    $path . 'ymca_frontend.locations.yml'
  ]);
}

/**
 * Update blog archive configuration.
 */
function ymca_master_update_8072() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [$path . 'views.view.ymca_twin_cities_blog_archive.yml']
  );
}

/**
 * Update alert block.
 */
function ymca_master_update_8073() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.block_content.alert_block.default.yml',
      $path . 'core.entity_view_display.block_content.alert_block.default.yml',
      $path . 'field.field.block_content.alert_block.field_end_date.yml',
      $path . 'field.field.block_content.alert_block.field_start_date.yml',
    ]
  );
}

/**
 * Setup sitemap.
 */
function ymca_master_update_8074() {
  // Remove redundant node.
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('node');
  $entity = $storage->load(2801);
  $entity->delete();
}

/**
 * Fix sitemap permissions.
 */
function ymca_master_update_8075() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.anonymous.yml',
      $path . 'user.role.authenticated.yml',
    ]
  );
}

/**
 * Configure exclude from sitemap.
 */
function ymca_master_update_8076() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.article.default.yml',
      $path . 'core.entity_form_display.node.blog.default.yml',
      $path . 'core.entity_form_display.node.camp.default.yml',
      $path . 'core.entity_form_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.article.default.yml',
      $path . 'core.entity_view_display.node.article.full.yml',
      $path . 'core.entity_view_display.node.article.rss.yml',
      $path . 'core.entity_view_display.node.article.teaser.yml',
      $path . 'core.entity_view_display.node.blog.camp_blog_teaser.yml',
      $path . 'core.entity_view_display.node.blog.default.yml',
      $path . 'core.entity_view_display.node.blog.location_blog_teaser.yml',
      $path . 'core.entity_view_display.node.blog.teaser.yml',
      $path . 'core.entity_view_display.node.camp.default.yml',
      $path . 'core.entity_view_display.node.camp.teaser.yml',
      $path . 'core.entity_view_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.location.groupex.yml',
      $path . 'core.entity_view_display.node.location.schedules.yml',
      $path . 'core.entity_view_display.node.location.teaser.yml',
      $path . 'field.field.node.article.field_sitemap_exclude.yml',
      $path . 'field.field.node.blog.field_sitemap_exclude.yml',
      $path . 'field.field.node.camp.field_sitemap_exclude.yml',
      $path . 'field.field.node.location.field_sitemap_exclude.yml',
      $path . 'field.storage.node.field_sitemap_exclude.yml',
    ]
  );
}

/**
 * Enable messages block.
 */
function ymca_master_update_8077() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'block.block.messages.yml',
    ]
  );
}

/**
 * Update membership config.
 */
function ymca_master_update_8078() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_membership.config.yml',
    ]
  );
}

/**
 * Remove redundant redirects.
 */
function ymca_master_update_8079() {
  $alias_manager = \Drupal::service('path.alias_manager');
  $redirect_repo = \Drupal::service('redirect.repository');

  $ids = \Drupal::entityQuery('node')->execute();
  foreach ($ids as $nid) {
    // Remove redirect if it has node alias + trailing slash redirect as a source.
    $source = ltrim($alias_manager->getAliasByPath('/node/' . $nid), '/') . '/';
    $redirect = $redirect_repo->findBySourcePath($source);
    if (!empty($redirect)) {
      foreach ($redirect as $item) {
        $item->delete();
        \Drupal::logger('ymca_master')->info(
          'The redirect for the source %source was removed',
          ['%source' => $source]
        );
      }
    }
  }
}

/**
 * Migrate exclude from sitemap option.
 */
function ymca_master_update_8080() {
  $db = Database::getConnection();
  $db_legacy = Database::getConnection('default', 'amm_source');
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('node');
  $field_name = 'field_sitemap_exclude';

  $pages = $db_legacy->select('amm_site_page', 'p')
    ->fields('p', ['site_page_id'])
    ->condition('p.exclude_from_sitemap', 1)
    ->execute()
    ->fetchAll();

  foreach ($pages as $page) {
    $id = $db->select('migrate_map_ymca_migrate_node_page', 'm')
      ->fields('m', ['destid1'])
      ->condition('sourceid1', $page->site_page_id)
      ->execute()
      ->fetchField();

    if (!$id) {
      continue;
    }

    $node = $storage->load($id);
    if (!$node) {
      continue;
    }

    if (!$node->hasField('field_sitemap_exclude')) {
      continue;
    }

    $field = $node->get($field_name);
    if (!$delta = $field->get(0)) {
      $field->applyDefaultValue(FALSE);
      $delta = $field->get(0);
    }

    $delta->set('value', 1);
    $node->save();

    \Drupal::logger('ymca_master')->info(
      'The node %node was excluded from sitemap',
      ['%node' => $id]
    );
  }
}

/**
 * Install modules.
 */
function ymca_master_update_8081() {
  $install = [
    'ctools',
    'panels',
    'page_manager',
    'page_manager_ui',
    'layout_plugin',
  ];
  \Drupal::service('module_installer')->install($install, TRUE);
}

/**
 * Add Youth Sports Landing Page as Panels page.
 */
function ymca_master_update_8082() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'page_manager.page.youth_sports_landing_page.yml',
      $path . 'page_manager.page_variant.youth_sports.yml',
    ]
  );
}

/**
 * Migrate exclude from sitemap option for native widget.
 */
function ymca_master_update_8084() {
  $db = Database::getConnection();
  $db_legacy = Database::getConnection('default', 'amm_source');
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('node');

  $pages = $db_legacy->select('amm_site_page', 'p')
    ->fields('p', ['site_page_id'])
    ->condition('p.exclude_from_sitemap', 1)
    ->execute()
    ->fetchAll();

  $sitemap = \Drupal::service('simple_sitemap.generator');
  foreach ($pages as $page) {
    $id = $db->select('migrate_map_ymca_migrate_node_page', 'm')
      ->fields('m', ['destid1'])
      ->condition('sourceid1', $page->site_page_id)
      ->execute()
      ->fetchField();

    if (!$id) {
      continue;
    }

    $node = $storage->load($id);
    if (!$node) {
      continue;
    }

    $entity_types = $sitemap->getConfig('entity_types');
    $entity_types['node_type'][$node->bundle()]['entities'][$node->id()]['index'] = 0;
    $entity_types['node_type'][$node->bundle()]['entities'][$node->id()]['priority'] = 0.5;
    $sitemap->saveConfig('entity_types', $entity_types);

    \Drupal::logger('ymca_master')->info(
      'The node %node was excluded from sitemap',
      ['%node' => $id]
    );
  }
}

/**
 * Add Youth Sports Landing Page as Panels page. Enable entity_clone.
 */
function ymca_master_update_8085() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'page_manager.page.youth_sports_landing_page.yml',
      $path . 'page_manager.page_variant.youth_sports.yml',
    ]
  );
  \Drupal::service('module_installer')->install(['entity_clone'], TRUE);
}

/**
 * Replace PDF files for location schedules feature.
 */
function ymca_master_update_8086() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.user.user.default.yml',
      $path . 'core.entity_view_display.user.user.compact.yml',
      $path . 'core.entity_view_display.user.user.default.yml',
      $path . 'field.field.user.user.field_locations.yml',
      $path . 'field.storage.user.field_locations.yml',
      $path . 'user.role.location_editor.yml',
      $path . 'views.view.location_schedules.yml',
    ]
  );
}

/**
 * Enable File Browser module & import relative configs.
 */
function ymca_master_update_8087() {
  \Drupal::service('module_installer')->install(['file_browser'], TRUE);
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'page_manager.page.youth_sports_landing_page.yml',
      $path . 'page_manager.page_variant.youth_sports.yml',
      $path . 'core.entity_form_display.block_content.image_block.default.yml',
      $path . 'core.entity_form_display.block_content.promo_block.default.yml',
      $path . 'core.entity_form_display.block_content.slide_show_item.default.yml',
      $path . 'core.entity_form_display.node.blog.default.yml',
      $path . 'core.entity_form_display.node.location.default.yml',
      $path . 'dropzonejs.settings.yml',
      $path . 'editor.editor.full_html.yml',
      $path . 'embed.button.file_browser.yml',
      $path . 'entity_browser.browser.browse_files.yml',
      $path . 'entity_browser.browser.browse_files_modal.yml',
      $path . 'image.style.file_entity_browser_thumbnail.yml',
      $path . 'views.view.files_entity_browser.yml',
    ]
  );
}

/**
 * Make Tags field required for blog post.
 */
function ymca_master_update_8088() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'field.field.node.blog.field_tags.yml',
    ]
  );
}

/**
 * Update content, menus and redirects to use new domain www.ymcamn.org.
 */
function ymca_master_update_8090() {
  $db = Database::getConnection();
  $places = [
    // Blocks content.
    'block_content_revision__body' => 'body_value',
    'block_content_revision__field_block_content' => 'field_block_content_value',
    'block_content_revision__field_code' => 'field_code_value',
    'block_content_revision__field_content_date_end' => 'field_content_date_end_value',
    'block_content_revision__field_link' => 'field_link_uri',
    'block_content_r__aa8e471054' => 'field_content_date_between_value',
    'block_content_r__c25b317576' => 'field_content_date_before_value',
    'block_content__body' => 'body_value',
    'block_content__field_block_content' => 'field_block_content_value',
    'block_content__field_code' => 'field_code_value',
    'block_content__field_content_date_before' => 'field_content_date_before_value',
    'block_content__field_content_date_between' => 'field_content_date_between_value',
    'block_content__field_content_date_end' => 'field_content_date_end_value',
    'block_content__field_link' => 'field_link_uri',
    // Menu.
    'menu_link_content_data' => 'link__uri',
    // Nodes content.
    'node_revision__field_camp_links' => 'field_camp_links_value',
    'node_revision__field_content' => 'field_content_value',
    'node_revision__field_header_button' => 'field_header_button_uri',
    'node_revision__field_join_override' => 'field_join_override_value',
    'node_revision__field_lead_description' => 'field_lead_description_value',
    'node_revision__field_schedule_content' => 'field_schedule_content_value',
    'node_revision__field_secondary_sidebar' => 'field_secondary_sidebar_value',
    'node_revision__field_sidebar' => 'field_sidebar_value',
    'node_revision__field_summary' => 'field_summary_value',
    'node_revision__field_title_description' => 'field_title_description_value',
    'node__field_camp_links' => 'field_camp_links_value',
    'node__field_content' => 'field_content_value',
    'node__field_header_button' => 'field_header_button_uri',
    'node__field_join_override' => 'field_join_override_value',
    'node__field_lead_description' => 'field_lead_description_value',
    'node__field_schedule_content' => 'field_schedule_content_value',
    'node__field_secondary_sidebar' => 'field_secondary_sidebar_value',
    'node__field_sidebar' => 'field_sidebar_value',
    'node__field_summary' => 'field_summary_value',
    'node__field_title_description' => 'field_title_description_value',
    // Redirects.
    'redirect' => 'redirect_redirect__uri',
  ];
  $replacements = [
    'www.ymcatwincities.org' => 'www.ymcamn.org',
    'http://ymcatwincities.org' => 'http://ymcamn.org',
  ];

  foreach ($places as $table => $column) {
    foreach ($replacements as $find => $replace) {
      $db->update($table)
        ->expression($column, 'REPLACE(' . $column . ', \'' . $find . '\', \'' . $replace . '\')')
        ->condition($column, '%' . $db->escapeLike($find) . '%', 'LIKE')
        ->execute();
    }
  }
}

/**
 * Install workflow module.
 */
function ymca_master_update_8093() {
  $install = [
    'workflow',
    'workflow_ui',
    'workflowfield',
    'workflow_operations',
    'workflow_access',
    'ymca_workflow',
  ];
  \Drupal::service('module_installer')->install($install, TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.blog.default.yml',
      $path . 'core.entity_form_display.node.camp.default.yml',
      $path . 'core.entity_form_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.article.default.yml',
      $path . 'core.entity_view_display.node.article.full.yml',
      $path . 'core.entity_view_display.node.article.rss.yml',
      $path . 'core.entity_view_display.node.article.teaser.yml',
      $path . 'core.entity_view_display.node.blog.camp_blog_teaser.yml',
      $path . 'core.entity_view_display.node.blog.default.yml',
      $path . 'core.entity_view_display.node.blog.location_blog_teaser.yml',
      $path . 'core.entity_view_display.node.blog.teaser.yml',
      $path . 'core.entity_view_display.node.camp.default.yml',
      $path . 'core.entity_view_display.node.camp.teaser.yml',
      $path . 'core.entity_view_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.location.groupex.yml',
      $path . 'core.entity_view_display.node.location.schedules.yml',
      $path . 'core.entity_view_display.node.location.teaser.yml',

      $path . 'field.field.node.article.field_state.yml',
      $path . 'field.storage.node.field_state.yml',

      $path . 'views.view.needs_review.yml',

      $path . 'user.role.contributor.yml',
      $path . 'user.role.editor.yml',

      // Workflow related configs.
      $path . 'workflow.settings.yml',
      $path . 'workflow.state.workflow_(creation).yml',
      $path . 'workflow.state.workflow_draft.yml',
      $path . 'workflow.state.workflow_needs_review.yml',
      $path . 'workflow.state.workflow_published.yml',
      $path . 'workflow.state.workflow_unpublished.yml',
      $path . 'workflow.transition.workflow_(creation)_draft.yml',
      $path . 'workflow.transition.workflow_(creation)_needs_review.yml',
      $path . 'workflow.transition.workflow_(creation)_published.yml',
      $path . 'workflow.transition.workflow_draft_draft.yml',
      $path . 'workflow.transition.workflow_draft_needs_review.yml',
      $path . 'workflow.transition.workflow_draft_published.yml',
      $path . 'workflow.transition.workflow_needs_review_draft.yml',
      $path . 'workflow.transition.workflow_needs_review_needs_review.yml',
      $path . 'workflow.transition.workflow_needs_review_published.yml',
      $path . 'workflow.transition.workflow_published_draft.yml',
      $path . 'workflow.transition.workflow_published_needs_review.yml',
      $path . 'workflow.transition.workflow_published_published.yml',
      $path . 'workflow.workflow.workflow.yml',
      $path . 'workflow_access.settings.yml',
      $path . 'workflow.transition.workflow_(creation)_unpublished.yml',
      $path . 'workflow.transition.workflow_draft_unpublished.yml',
      $path . 'workflow.transition.workflow_needs_review_unpublished.yml',
      $path . 'workflow.transition.workflow_published_unpublished.yml',
      $path . 'workflow.transition.workflow_unpublished_draft.yml',
      $path . 'workflow.transition.workflow_unpublished_needs_review.yml',
      $path . 'workflow.transition.workflow_unpublished_published.yml',
      $path . 'workflow.transition.workflow_unpublished_unpublished.yml',
    ]
  );

  $factory = \Drupal::configFactory();
  $delete = [
    'field.field.node.article.field_sitemap_exclude',
    'field.field.node.blog.field_sitemap_exclude',
    'field.field.node.camp.field_sitemap_exclude',
    'field.field.node.location.field_sitemap_exclude',
    'field.storage.node.field_sitemap_exclude',
    // Remove Status field.
    'field.field.node.article.field_status',
    'field.storage.node.field_status',
  ];
  foreach ($delete as $item) {
    $factory->getEditable($item)->delete();
  }

  // Disable Scheduler module.
  // We should ensure the publish_on and unpublish_on fields are empty.
  $db = Database::getConnection();
  $db->update('node_field_data')
    ->fields([
      'publish_on' => NULL,
      'unpublish_on' => NULL
    ])
    ->execute();
  Drupal::service('module_installer')->uninstall(['scheduler']);

  drupal_flush_all_caches();
}

/**
 * Enable Content Browser module & import relative configs.
 */
function ymca_master_update_8094() {
  \Drupal::service('module_installer')->install(['content_browser'], TRUE);
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.article.default.yml',
      $path . 'core.entity_form_display.node.blog.default.yml',
      $path . 'core.entity_form_display.node.camp.default.yml',
      $path . 'core.entity_view_display.node.article.content_browser_preview.yml',
      $path . 'core.entity_view_display.node.article.default.yml',
      $path . 'core.entity_view_display.node.blog.content_browser_preview.yml',
      $path . 'core.entity_view_display.node.blog.default.yml',
      $path . 'core.entity_view_display.node.camp.content_browser_preview.yml',
      $path . 'core.entity_view_display.node.location.content_browser_preview.yml',
      $path . 'core.entity_view_display.node.location.default.yml',
      $path . 'core.entity_view_mode.node.content_browser_preview.yml',
      $path . 'embed.button.content_browser.yml',
      $path . 'entity_browser.browser.browse_content.yml',
      $path . 'entity_browser.browser.browse_content_modal.yml',
      $path . 'views.view.content_browser_node.yml',
    ]
  );
}

/**
 * Enabling inline_entity_form.
 */
function ymca_master_update_8091() {
  \Drupal::service('module_installer')->install(array('inline_entity_form'), TRUE);
}

/**
 * Enabling inline form for all block's references.
 */
function ymca_master_update_8095() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.article.default.yml',
      $path . 'core.entity_form_display.node.camp.default.yml',
      $path . 'core.entity_form_display.node.location.default.yml',
    ]
  );
}

/**
 * Add new theme specific config.
 */
function ymca_master_update_8096() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_frontend.settings.yml',
    ]
  );
}

/**
 * Update views "Needs review" config.
 */
function ymca_master_update_8097() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.needs_review.yml',
    ]
  );
}

/**
 * Combine entity browser and inline entity form.
 */
function ymca_master_update_8098() {
  $modules = [
    'entity_browser_entity_form',
    'ymca_ief_entity_browser',
  ];

  \Drupal::service('module_installer')->install($modules, TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.content_browser_block.yml',
      $path . 'entity_browser.browser.browse_block_modal.yml',
    ]
  );
}

/**
 * Combine entity embed and entity browser for blocks.
 */
function ymca_master_update_8099() {
  $install = ['ymca_entity_browser'];
  \Drupal::service('module_installer')->install($install, TRUE);

  $uninstall = ['ymca_ief_entity_browser'];
  \Drupal::service('module_installer')->uninstall($uninstall, TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'entity_browser.browser.block_browser_iframe.yml',
      $path . 'embed.button.block.yml',
    ]
  );
}

/**
 * Enable Big Pipe core module.
 */
function ymca_master_update_8100() {
  \Drupal::service('module_installer')->install(array('big_pipe'), TRUE);
  \Drupal::service('module_installer')->uninstall(['image_widget_crop']);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.article.default.yml'
    ]
  );
}

/**
 * Install acquia_purge module and respective configs.
 */
function ymca_master_update_8103() {
  \Drupal::service('module_installer')->install(array('acquia_purge'), TRUE);
  Drupal::configFactory()->getEditable('purge_purger_http.settings.ffd776af8e')->delete();
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'purge.plugins.yml',
    ]
  );
}

/**
 * Update configs. Add "New" prefix for all tabs. Fix file modal to inline.
 */
function ymca_master_update_8104() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'entity_browser.browser.block_browser_iframe.yml',
      $path . 'views.view.content_browser_block.yml',
      $path . 'core.entity_form_display.block_content.image_block.default.yml',
      $path . 'core.entity_form_display.block_content.promo_block.default.yml',
      $path . 'core.entity_form_display.block_content.slide_show_item.default.yml'
    ]
  );
}

/**
 * Add Mapping entity.
 */
function ymca_master_update_8105() {
  \Drupal::service('module_installer')->install(['ymca_mappings'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mappings.mapping_type.location.yml',
      $path . 'ymca_mappings.mapping_type.trainer.yml',
    ]
  );
}

/**
 * Initial fields for TrainerID.
 */
function ymca_master_update_8106() {

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.trainer.default.yml',
      $path . 'core.entity_view_display.mapping.trainer.default.yml',
      $path . 'field.field.mapping.trainer.field_mindbody_trainer_id.yml',
      $path . 'field.field.mapping.trainer.field_trainer_page_ref.yml',
      $path . 'field.storage.mapping.field_mindbody_trainer_id.yml',
      $path . 'field.storage.mapping.field_trainer_page_ref.yml',
    ]
  );
}

/**
 * Initial fields for Location mapping.
 */
function ymca_master_update_8107() {

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.location.default.yml',
      $path . 'core.entity_view_display.mapping.location.default.yml',
      $path . 'field.field.mapping.location.field_groupex_id.yml',
      $path . 'field.field.mapping.location.field_location_ref.yml',
      $path . 'field.field.mapping.location.field_mindbody_id.yml',
      $path . 'field.storage.mapping.field_groupex_id.yml',
      $path . 'field.storage.mapping.field_location_ref.yml',
      $path . 'field.storage.mapping.field_mindbody_id.yml',
    ]
  );
}

/**
 * Populate location mappings.
 */
function ymca_master_update_8108() {
  $locations = \Drupal::config('ymca_groupex.mapping')->get('locations');
  foreach ($locations as $location) {
    $mapping = Mapping::create([
      'type' => 'location',
      'field_location_ref' => $location['entity_id'],
      'field_groupex_id' => $location['geid'],
    ]);
    $mapping->setName($location['name']);
    $mapping->save();
  }
}

/**
 * Update Content Browser configs.
 */
function ymca_master_update_8109() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.content_browser_block.yml',
    ]
  );
}

/**
 * Set ymca_rest_export plugin for the CSV export.
 */
function ymca_master_update_8110() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.contact_messages_csv_export.yml',
    ]
  );
}

/**
 * Update location mappings.
 */
function ymca_master_update_8111() {
  // Map: Mindbody ID => Location ID.
  $map = [
    1 => 4,
    2 => 21,
    3 => 13,
    4 => 25,
    5 => 14,
    6 => 10,
    7 => 17,
    8 => 18,
    9 => 8,
    10 => 5,
    11 => 6,
    12 => 9,
    13 => 7,
    14 => 2746,
    15 => 26,
    16 => 24,
    17 => 19,
    18 => 23,
    19 => 22,
    20 => 16,
    22 => 12,
    23 => 11,
    24 => 20,
  ];

  /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('mapping');

  foreach ($map as $mindbody_id => $location_id) {
    $query = \Drupal::entityQuery('mapping')
      ->condition('type', 'location')
      ->condition('field_location_ref', $location_id)
      ->execute();

    if ($query) {
      /** @var Mapping $mapping */
      $mapping = $storage->load(reset($query));
      if ($mapping) {
        $mapping->set('field_mindbody_id', $mindbody_id);
        $mapping->save();
        \Drupal::logger('ymca_master')->info(
          'Add MindBody ID to mapping #%mapping.',
          ['%mapping' => $mapping->id()]
        );
      }
    }

  }
}

/**
 * Remove redundant groupex location.
 */
function ymca_master_update_8112() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_groupex.mapping.yml',
    ]
  );
}

/**
 * Re-import location mappings.
 */
function ymca_master_update_8113() {
  // Delete all Location mappings.
  $ids = \Drupal::entityQuery('mapping')
    ->condition('type', 'location')
    ->execute();

  $storage = \Drupal::getContainer()
    ->get('entity.manager')
    ->getStorage('mapping');
  $entities = $storage->loadMultiple($ids);
  $storage->delete($entities);

  // Populate entities.
  ymca_master_update_8108();

  // Update location mappings.
  ymca_master_update_8111();
}

/**
 * Import MindBody trainers IDs.
 */
function ymca_master_update_8114() {
  // Read CSV file with map.
  $path = drupal_get_path('module', 'ymca_master');
  $csv_file = $path . '/misc/trainers_mindbody.csv';
  $map = array_map('str_getcsv', file($csv_file));

  foreach ($map as $trainer) {
    $mapping = Mapping::create([
      'type' => 'trainer',
      'field_mindbody_trainer_id' => $trainer[0],
    ]);
    $mapping->setName($trainer[1]);
    $mapping->save();
  }
}

/**
 * Update Content Browser configs.
 */
function ymca_master_update_8115() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.editor.yml',
      $path . 'user.role.location_editor.yml',
    ]
  );
}

/**
 * Install flood control module.
 */
function ymca_master_update_8116() {
  \Drupal::service('module_installer')->install(['flood_unblock'], TRUE);
}

/**
 * Delete ymca_groupex.mapping config.
 */
function ymca_master_update_8117() {
  Drupal::configFactory()->getEditable('ymca_groupex.mapping')->delete();
}

/**
 * Add Gcal POC.
 */
function ymca_master_update_8118() {
  \Drupal::service('module_installer')->install(['ymca_google'], TRUE);
}

/**
 * Update file limit settings.
 */
function ymca_master_update_8119() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'file_entity.settings.yml',
    ]
  );
}

/**
 * Create Groupex mapping bundle.
 */
function ymca_master_update_8120() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.groupex.default.yml',
      $path . 'core.entity_view_display.mapping.groupex.default.yml',
      $path . 'field.field.mapping.groupex.field_groupex_category.yml',
      $path . 'field.field.mapping.groupex.field_groupex_class_id.yml',
      $path . 'field.field.mapping.groupex.field_groupex_description.yml',
      $path . 'field.field.mapping.groupex.field_groupex_instructor.yml',
      $path . 'field.field.mapping.groupex.field_groupex_location.yml',
      $path . 'field.field.mapping.groupex.field_groupex_orig_instructor.yml',
      $path . 'field.field.mapping.groupex.field_groupex_studio.yml',
      $path . 'field.field.mapping.groupex.field_groupex_sub_instructor.yml',
      $path . 'field.field.mapping.groupex.field_timestamp_end.yml',
      $path . 'field.field.mapping.groupex.field_timestamp_start.yml',
      $path . 'field.field.mapping.groupex.field_groupex_date.yml',
      $path . 'field.field.mapping.groupex.field_groupex_time.yml',
      $path . 'field.field.mapping.groupex.field_gcal_id.yml',
      $path . 'field.field.mapping.groupex.field_groupex_title.yml',
      $path . 'field.storage.mapping.field_groupex_category.yml',
      $path . 'field.storage.mapping.field_groupex_class_id.yml',
      $path . 'field.storage.mapping.field_groupex_description.yml',
      $path . 'field.storage.mapping.field_groupex_instructor.yml',
      $path . 'field.storage.mapping.field_groupex_location.yml',
      $path . 'field.storage.mapping.field_groupex_orig_instructor.yml',
      $path . 'field.storage.mapping.field_groupex_studio.yml',
      $path . 'field.storage.mapping.field_groupex_sub_instructor.yml',
      $path . 'field.storage.mapping.field_timestamp_end.yml',
      $path . 'field.storage.mapping.field_timestamp_start.yml',
      $path . 'field.storage.mapping.field_groupex_date.yml',
      $path . 'field.storage.mapping.field_groupex_time.yml',
      $path . 'field.storage.mapping.field_gcal_id.yml',
      $path . 'field.storage.mapping.field_groupex_title.yml',
      $path . 'ymca_mappings.mapping_type.groupex.yml',
    ]
  );
}

/**
 * Add flash mime types.
 */
function ymca_master_update_8121() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'file_entity.type.video.yml',
    ]
  );
}

/**
 * Increase file upload max size for file_browsers.
 */
function ymca_master_update_8122() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'entity_browser.browser.browse_files.yml',
      $path . 'entity_browser.browser.browse_files_modal.yml'
    ]
  );
}

/**
 * Add YMCA Sync module and update fields.
 */
function ymca_master_update_8123() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.groupex.default.yml',
      $path . 'core.entity_view_display.mapping.groupex.default.yml',
      $path . 'field.field.mapping.groupex.field_groupex_category.yml',
      $path . 'field.field.mapping.groupex.field_groupex_class_id.yml',
      $path . 'field.field.mapping.groupex.field_groupex_description.yml',
      $path . 'field.field.mapping.groupex.field_groupex_instructor.yml',
      $path . 'field.field.mapping.groupex.field_groupex_location.yml',
      $path . 'field.field.mapping.groupex.field_groupex_orig_instructor.yml',
      $path . 'field.field.mapping.groupex.field_groupex_studio.yml',
      $path . 'field.field.mapping.groupex.field_groupex_sub_instructor.yml',
      $path . 'field.field.mapping.groupex.field_timestamp_end.yml',
      $path . 'field.field.mapping.groupex.field_timestamp_start.yml',
      $path . 'field.field.mapping.groupex.field_groupex_date.yml',
      $path . 'field.field.mapping.groupex.field_groupex_time.yml',
      $path . 'field.field.mapping.groupex.field_gcal_id.yml',
      $path . 'field.field.mapping.groupex.field_groupex_title.yml',
      $path . 'field.field.mapping.groupex.field_time_frame_start.yml',
      $path . 'field.field.mapping.groupex.field_time_frame_end.yml',
      $path . 'field.storage.mapping.field_groupex_category.yml',
      $path . 'field.storage.mapping.field_groupex_class_id.yml',
      $path . 'field.storage.mapping.field_groupex_description.yml',
      $path . 'field.storage.mapping.field_groupex_instructor.yml',
      $path . 'field.storage.mapping.field_groupex_location.yml',
      $path . 'field.storage.mapping.field_groupex_orig_instructor.yml',
      $path . 'field.storage.mapping.field_groupex_studio.yml',
      $path . 'field.storage.mapping.field_groupex_sub_instructor.yml',
      $path . 'field.storage.mapping.field_timestamp_end.yml',
      $path . 'field.storage.mapping.field_timestamp_start.yml',
      $path . 'field.storage.mapping.field_groupex_date.yml',
      $path . 'field.storage.mapping.field_groupex_time.yml',
      $path . 'field.storage.mapping.field_gcal_id.yml',
      $path . 'field.storage.mapping.field_groupex_title.yml',
      $path . 'field.storage.mapping.field_time_frame_start.yml',
      $path . 'field.storage.mapping.field_time_frame_end.yml',
      $path . 'ymca_mappings.mapping_type.groupex.yml',
    ]
  );

  \Drupal::service('module_installer')->install(['ymca_sync'], TRUE);
}

/**
 * Import GCal credentials config.
 */
function ymca_master_update_8124() {
  $path = drupal_get_path('module', 'ymca_google') . '/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_google.token.yml',
      $path . 'ymca_google.settings.yml',
    ]
  );
}

/**
 * Import personify configs.
 */
function ymca_master_update_8125() {
  $path = drupal_get_path('module', 'ymca_personify');
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . '/config/install/ymca_personify.settings.yml',
    ]
  );
}

/**
 * Add fields to location mapping entity.
 */
function ymca_master_update_8126() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.location.default.yml',
      $path . 'core.entity_view_display.mapping.location.default.yml',
      $path . 'field.field.mapping.location.field_location_address_1.yml',
      $path . 'field.field.mapping.location.field_location_address_2.yml',
      $path . 'field.field.mapping.location.field_location_city.yml',
      $path . 'field.field.mapping.location.field_location_hrs_mon_fri.yml',
      $path . 'field.field.mapping.location.field_location_hrs_sat_sun.yml',
      $path . 'field.field.mapping.location.field_location_icon.yml',
      $path . 'field.field.mapping.location.field_location_latitude.yml',
      $path . 'field.field.mapping.location.field_location_longitude.yml',
      $path . 'field.field.mapping.location.field_location_map_shadow.yml',
      $path . 'field.field.mapping.location.field_location_name.yml',
      $path . 'field.field.mapping.location.field_location_personify_brcode.yml',
      $path . 'field.field.mapping.location.field_location_phone.yml',
      $path . 'field.field.mapping.location.field_location_ref.yml',
      $path . 'field.field.mapping.location.field_location_state.yml',
      $path . 'field.field.mapping.location.field_location_tags.yml',
      $path . 'field.field.mapping.location.field_location_zip.yml',
      $path . 'field.field.mapping.location.field_location_url.yml',
      $path . 'field.storage.mapping.field_location_address_1.yml',
      $path . 'field.storage.mapping.field_location_address_2.yml',
      $path . 'field.storage.mapping.field_location_city.yml',
      $path . 'field.storage.mapping.field_location_hrs_mon_fri.yml',
      $path . 'field.storage.mapping.field_location_hrs_sat_sun.yml',
      $path . 'field.storage.mapping.field_location_icon.yml',
      $path . 'field.storage.mapping.field_location_latitude.yml',
      $path . 'field.storage.mapping.field_location_longitude.yml',
      $path . 'field.storage.mapping.field_location_map_shadow.yml',
      $path . 'field.storage.mapping.field_location_name.yml',
      $path . 'field.storage.mapping.field_location_personify_brcode.yml',
      $path . 'field.storage.mapping.field_location_phone.yml',
      $path . 'field.storage.mapping.field_location_state.yml',
      $path . 'field.storage.mapping.field_location_tags.yml',
      $path . 'field.storage.mapping.field_location_zip.yml',
      $path . 'field.storage.mapping.field_location_url.yml',
    ]
  );
}

/**
 * Enrich location mapping entities with new data.
 */
function ymca_master_update_8127() {
  $config = \Drupal::config('ymca_frontend.locations')->get();

  $map = [
    'name' => 'field_location_name',
    'address1' => 'field_location_address_1',
    'address2' => 'field_location_address_2',
    'city' => 'field_location_city',
    'state' => 'field_location_state',
    'zip' => 'field_location_zip',
    'phone' => 'field_location_phone',
    'url' => 'field_location_url',
    'tags' => 'field_location_tags',
    'latitude' => 'field_location_latitude',
    'longitude' => 'field_location_longitude',
    'icon' => 'field_location_icon',
    'geid' => 'field_groupex_id',
    'personify_brcode' => 'field_location_personify_brcode',
    'shadow' => 'field_location_map_shadow',
    'HRS Mon-Fri' => 'field_location_hrs_mon_fri',
    'HRS Sat-Sun' => 'field_location_hrs_sat_sun',
  ];

  foreach ($config as $config_item) {
    $ids = \Drupal::entityQuery('mapping')
      ->condition('type', 'location')
      ->condition('name', $config_item['name'])
      ->execute();

    if (!empty($ids)) {
      $op = 'updated';
      $mapping = Mapping::load(reset($ids));
    }
    else {
      $op = 'created';
      $mapping = Mapping::create(['type' => 'location']);
      $mapping->setName($config_item['name']);
    }

    // Set all available fields.
    foreach ($config_item as $config_item_name => $config_item_value) {
      if (!empty($config_item_value)) {
        $mapping->set($map[$config_item_name], $config_item_value);
      }
    }

    $mapping->save();
    $msg = 'Mapping %op ID: %id.';
    \Drupal::logger('ymca_master')->info($msg, [
      '%op' => $op,
      '%id' => $mapping->id()
    ]);
  }
}

/**
 * Add YMCA menu blocks.
 */
function ymca_master_update_8128() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'block.block.mastheadnavigationblock.yml',
      $path . 'block.block.sidebarnavigation.yml',
      $path . 'block.block.subnavigationblock.yml',
      $path . 'block.block.mainnavigation.yml',
    ]
  );
}

/**
 * Install MindBody modules.
 */
function ymca_master_update_8129() {
  $modules = ['mindbody', 'mindbody_cache_proxy', 'ymca_mindbody'];
  \Drupal::service('module_installer')->install($modules, TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'mindbody.settings.yml',
    ]
  );
}

/**
 * Migrate location schedules to blocks.
 */
function ymca_master_update_8130() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      // New block type.
      $path . 'block_content.type.location_schedule.yml',
      $path . 'language.content_settings.block_content.location_schedule.yml',
      $path . 'core.entity_form_display.block_content.location_schedule.default.yml',
      $path . 'core.entity_view_display.block_content.location_schedule.default.yml',
      $path . 'field.field.block_content.location_schedule.field_schedule_documents.yml',
      $path . 'field.storage.block_content.field_schedule_documents.yml',
      // New field for location content type.
      $path . 'field.field.node.location.field_schedule_block.yml',
      $path . 'field.storage.node.field_schedule_block.yml',
      $path . 'core.entity_form_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.location.schedules.yml',
      // Update user location schedules view.
      $path . 'views.view.location_schedules.yml',
    ]
  );
  drupal_flush_all_caches();

  // Migrate location schedule documents field to new blocks.
  $node_storage = \Drupal::getContainer()->get('entity.manager')->getStorage('node');
  $location_nids = \Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->execute();
  foreach ($location_nids as $nid) {
    $node = $node_storage->load($nid);
    $block_data = [
      'type' => 'location_schedule',
      'info' => $node->getTitle() . ' Schedule',
      'langcode' => 'en',
      'field_schedule_documents' => [],
    ];
    if ($node->hasField('field_schedule_documents')) {
      foreach ($node->field_schedule_documents->getValue() as $delta => $value) {
        $value['display'] = 1;
        $block_data['field_schedule_documents'][$delta] = $value;
      }
    }
    $block = BlockContent::create($block_data)->enforceIsNew();
    $block->save();
    $node->set('field_schedule_block', ['target_id' => $block->id()]);
    $node->save();
  }

  // Delete field from location content type.
  $field_name = 'node.location.field_schedule_documents';
  $storage = \Drupal::getContainer()->get('entity_type.manager')->getStorage('field_config');
  $fields = $storage->loadByProperties(['entity_type' => 'node', 'bundle' => 'location']);
  if (isset($fields[$field_name])) {
    $fields[$field_name]->delete();
  }
}

/**
 * Add workflow to the blogs.
 */
function ymca_master_update_8131() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'field.field.node.blog.field_state.yml',
      $path . 'core.entity_form_display.node.blog.default.yml',
      $path . 'core.entity_view_display.node.blog.default.yml',
    ]
  );
}

/**
 * WH blocks workflow.
 */
function ymca_master_update_8132() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.location_wh.yml',
      $path . 'views.view.location_schedules.yml',
      $path . 'user.role.authenticated.yml',
    ]
  );

  \Drupal::service('module_installer')->install(['block_content_access'], TRUE);
}

/**
 * Enable Location Schedule blocks in entity browser dialog.
 */
function ymca_master_update_8133() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'entity_browser.browser.block_browser_iframe.yml',
      $path . 'embed.button.block.yml',
    ]
  );
}

/**
 * Enable phone validation on webforms' fields.
 */
function ymca_master_update_8134() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.contact_message.become_a_supplier.default.yml',
      $path . 'core.entity_form_display.contact_message.cc_wellness_employee.default.yml',
      $path . 'core.entity_form_display.contact_message.cc_wellness_employer.default.yml',
      $path . 'core.entity_form_display.contact_message.contact_an_aquatics_manager.default.yml',
      $path . 'core.entity_form_display.contact_message.contact_personal_training.default.yml',
      $path . 'core.entity_form_display.contact_message.journey_to_freedom.default.yml',
      $path . 'core.entity_form_display.contact_message.membership_form.default.yml',
      $path . 'core.entity_form_display.contact_message.personal_trainers_individual.default.yml',
      $path . 'core.entity_form_display.contact_message.wait_list.default.yml',
    ]
  );
}

/**
 * Update MindBody settings.
 */
function ymca_master_update_8135() {
  drupal_flush_all_caches();
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'mindbody.settings.yml',
      $path . 'mindbody.env.settings.yml',
    ]
  );
}

/**
 * Add Mindbody blocks config.
 */
function ymca_master_update_8136() {
  // Enable the module in order to import related config.
  \Drupal::service('module_installer')->install(['ymca_mindbody'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mindbody.block.settings.yml',
    ]
  );

  // Disable the module due to we don't want it to be enabled on prod.
  \Drupal::service('module_installer')->uninstall(['ymca_mindbody']);
}

/**
 * Enable token filter module.
 */
function ymca_master_update_8137() {
  \Drupal::service('module_installer')->install(['token_filter'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'filter.format.code.yml',
      $path . 'filter.format.full_html.yml',
    ]
  );
}

/**
 * Create Groupex Google Cache entity.
 */
function ymca_master_update_8138() {
  \Drupal::service('module_installer')->install(['ymca_groupex_google_cache'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.groupex_google_cache.groupex_google_cache.default.yml',
      $path . 'core.entity_view_display.groupex_google_cache.groupex_google_cache.default.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_category.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_class_id.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_date.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_description.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_gcal_id.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_instructor.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_orig_instructor.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_location.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_studio.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_sub_instructor.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_time.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_time_frame_end.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_time_frame_start.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_timestamp_end.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_timestamp_start.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_title.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_category.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_class_id.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_date.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_description.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_gcal_id.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_instructor.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_orig_instructor.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_location.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_studio.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_sub_instructor.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_time.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_time_frame_end.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_time_frame_start.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_timestamp_end.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_timestamp_start.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_title.yml',
    ]
  );
}

/**
 * Remove old Groupex mapping entity.
 */
function ymca_master_update_8139() {
  $entityTypeManager = \Drupal::entityTypeManager();

  // Remove groupex entities.
  $ids = Drupal::entityQuery('mapping')->condition('type', 'groupex')->execute();
  $chunks = array_chunk($ids, 10);
  $mapping = $entityTypeManager->getStorage('mapping');
  foreach ($chunks as $chunk) {
    $mappings = Mapping::loadMultiple($chunk);
    $mapping->delete($mappings);
  }

  // Remove groupex mapping entity type.
  $entityTypeManager->getStorage('mapping_type')->load('groupex')->delete();
}

/**
 * Add Panorama block type and panorama field.
 */
function ymca_master_update_8140() {
  \Drupal::service('module_installer')->install(['gardengnome_player'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'block_content.type.panorama_block.yml',
      $path . 'core.entity_form_display.block_content.panorama_block.default.yml',
      $path . 'core.entity_view_display.block_content.panorama_block.default.yml',
      $path . 'field.field.block_content.panorama_block.body.yml',
      $path . 'field.field.block_content.panorama_block.field_panorama_archive.yml',
      $path . 'field.storage.block_content.field_panorama_archive.yml',
      $path . 'language.content_settings.block_content.panorama_block.yml',
      $path . 'embed.button.block.yml',
      $path . 'entity_browser.browser.block_browser_iframe.yml',
    ]
  );
}

/**
 * Fix permissions for editor and intern.
 */
function ymca_master_update_8141() {
  \Drupal::service('module_installer')->install(['gardengnome_player'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml',
    ]
  );
}

/**
 * Enable YMCA Page Manager.
 */
function ymca_master_update_8142() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml',
    ]
  );

  \Drupal::service('module_installer')->install(['ymca_page_manager'], TRUE);
}

/**
 * Add new phone filed for Location CT.
 */
function ymca_master_update_8143() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.location.default.yml',
      $path . 'core.entity_view_display.node.location.default.yml',
      $path . 'field.field.node.location.field_fitness_phone.yml',
      $path . 'field.field.node.location.field_phone.yml',
      $path . 'field.storage.node.field_fitness_phone.yml',
    ]
  );
}

/**
 * Enable 'environment_config' module.
 */
function ymca_master_update_8144() {
  \Drupal::service('module_installer')->install(['environment_config'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'mindbody.settings.env.yml',
      $path . 'mindbody.settings.yml',
    ]
  );
}

/**
 * Import config.
 */
function ymca_master_update_8145() {
  // Remove old config.
  $factory = \Drupal::configFactory();
  $remove = [
    'mindbody.env.settings',
  ];

  foreach ($remove as $name) {
    $factory->getEditable($name)->delete();
  }

  // Import new one.
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'mindbody.settings.env.yml',
    ]
  );
}

/**
 * Fix intern permissions.
 */
function ymca_master_update_8146() {
  // Import new one.
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.intern.yml',
      $path . 'workflow.transition.workflow_(creation)_draft.yml',
      $path . 'workflow.transition.workflow_(creation)_needs_review.yml',
      $path . 'workflow.transition.workflow_(creation)_published.yml',
      $path . 'workflow.transition.workflow_(creation)_unpublished.yml',
      $path . 'workflow.transition.workflow_draft_needs_review.yml',
      $path . 'workflow.transition.workflow_draft_published.yml',
      $path . 'workflow.transition.workflow_draft_unpublished.yml',
      $path . 'workflow.transition.workflow_needs_review_draft.yml',
      $path . 'workflow.transition.workflow_needs_review_published.yml',
      $path . 'workflow.transition.workflow_needs_review_unpublished.yml',
      $path . 'workflow.transition.workflow_published_draft.yml',
      $path . 'workflow.transition.workflow_published_needs_review.yml',
      $path . 'workflow.transition.workflow_published_unpublished.yml',
      $path . 'workflow.transition.workflow_unpublished_draft.yml',
      $path . 'workflow.transition.workflow_unpublished_needs_review.yml',
      $path . 'workflow.transition.workflow_unpublished_published.yml'
    ]
  );
}

/**
 * SPS-894 It adds recommended sizes for image fields in the description.
 */
function ymca_master_update_8147() {
  \Drupal::service('module_installer')->install(['environment_config'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'field.field.block_content.promo_block.field_image.yml',
      $path . 'field.field.block_content.slide_show_item.field_image.yml',
      $path . 'field.field.node.article.field_header_image.yml',
      $path . 'field.field.node.blog.field_image.yml'
    ]
  );
}

/**
 * Enable 'ab' module.
 */
function ymca_master_update_8148() {
  // Import configs with blocks & menus.
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      // Top menu configs.
      $path . 'block.block.top_menu_2.yml',
      $path . 'system.menu.top_menu_2.yml',

      // Meganav menu and block configs.
      $path . 'block.block.mastheadnavigationblock.yml',
      $path . 'block.block.mastheadnavigationblock_2.yml',
      $path . 'ymca_menu.main_menu_b.yml',

      // Footer menu block config.
      $path . 'block.block.footer_b.yml',
    ]
  );

  // Add initial menu links.
  $items = [
    [
      'title' => 'Example Link',
      'link' => ['uri' => 'internal:/node'],
      'menu_name' => 'top_menu_2',
    ],
  ];

  foreach ($items as $item) {
    $menu_item = MenuLinkContent::create($item);
    $menu_item->save();
  }

  // Enable 'ab' module.
  \Drupal::service('module_installer')->install(['ab'], TRUE);

  // Configure 'ab' module.
  $config = Drupal::configFactory()->getEditable('ab.settings');
  $replacements = [
    [
      'block_id' => 'top_menu_2',
      'selector' => '#block-topmenu'
    ],
    [
      'block_id' => 'mastheadnavigationblock_2',
      'selector' => '#masthead-menu'
    ],
    [
      'block_id' => 'footer_b',
      'selector' => '.nav-footer > div'
    ],
  ];
  $config->set('replacements', $replacements);
  $config->save();
}

/**
 * YMCA-1027: Fix intern & contributor permissions.
 */
function ymca_master_update_8149() {
  \Drupal::service('module_installer')->install(['ymca_perms'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml',
    ]
  );
}

/**
 * MindBody settings.
 */
function ymca_master_update_8150() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'mindbody.settings.env.yml',
      $path . 'mindbody.settings.yml',
    ]
  );
}

/**
 * Add new field_template to article node.
 */
function ymca_master_update_8151() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.node.article.default.yml',
      $path . 'core.entity_view_display.node.article.default.yml',
      $path . 'field.field.node.article.field_template.yml',
      $path . 'field.storage.node.field_template.yml',
    ]
  );
}

/**
 * YPTF form menu links.
 */
function ymca_master_update_8155() {
  $items = [
    // Locations that DO NOT have Personal Training page:
    // - Heritage Park YMCA.
    // - Mounds View Community Center.
    // - North Community YMCA.
    // - University YMCA.
    // - Youth in Government.
    // Locations that DO have Personal Training page:
    // Andover YMCA.
    [
      'location_id' => '1',
      'parent' => '1721',
      'nid' => 4,
      'path' => '/locations/andover_ymca_community_center/',
    ],
    // Blaisdell YMCA.
    [
      'location_id' => '10',
      'parent' => '1728',
      'nid' => 5,
      'path' => '/locations/blaisdell_ymca/',
    ],
    // Burnsville YMCA.
    [
      'location_id' => '11',
      'parent' => '1736',
      'nid' => 6,
      'path' => '/locations/burnsville_ymca/',
    ],
    // Eagan YMCA.
    [
      'location_id' => '13',
      'parent' => '1686',
      'nid' => 7,
      'path' => '/locations/eagan_ymca/',
    ],
    // Elk River YMCA.
    [
      'location_id' => '9',
      'parent' => '1693',
      'nid' => 8,
      'path' => '/locations/elk_river_ymca/',
    ],
    // Emma B. Howe YMCA.
    [
      'location_id' => '12',
      'parent' => '1700',
      'nid' => 9,
      'path' => '/locations/emma_b_howe_ymca/',
    ],
    // Forest Lake YMCA.
    [
      'location_id' => '14',
      'parent' => '3336',
      'nid' => 2746,
      'path' => '/locations/forest_lake_ymca/',
    ],
    // Hastings YMCA.
    [
      'location_id' => '6',
      'parent' => '1707',
      'nid' => 10,
      'path' => '/locations/hastings_ymca/',
    ],
    // Hudson YMCA.
    [
      'location_id' => '22',
      'parent' => '1715',
      'nid' => 12,
      'path' => '/locations/hudson_ymca/',
    ],
    // Lino Lakes YMCA.
    [
      'location_id' => '3',
      'parent' => '1719',
      'nid' => 13,
      'path' => '/locations/lino_lakes_ymca/',
    ],
    // Minneapolis Downtown YMCA.
    [
      'location_id' => '5',
      'parent' => '1724',
      'nid' => 14,
      'path' => '/locations/minneapolis_downtown_ymca/',
    ],
    // New Hope YMCA.
    [
      'location_id' => '20',
      'parent' => '1726',
      'nid' => 16,
      'path' => '/locations/new_hope_ymca/',
    ],
    // Ridgedale YMCA.
    [
      'location_id' => '7',
      'parent' => '1729',
      'nid' => 17,
      'path' => '/locations/ridgedale_ymca/',
    ],
    // River Valley YMCA.
    [
      'location_id' => '8',
      'parent' => '1733',
      'nid' => 18,
      'path' => '/locations/river_valley_ymca/',
    ],
    // St. Paul Downtown YMCA.
    [
      'location_id' => '17',
      'parent' => '1737',
      'nid' => 19,
      'path' => '/locations/st_paul_downtown_ymca/',
    ],
    // St. Paul Eastside YMCA.
    [
      'location_id' => '24',
      'parent' => '1685',
      'nid' => 20,
      'path' => '/locations/st_paul_eastside_ymca/',
    ],
    // St. Paul Midway YMCA.
    [
      'location_id' => '2',
      'parent' => '1692',
      'nid' => 21,
      'path' => '/locations/st_paul_midway_ymca/',
    ],
    // Shoreview YMCA.
    [
      'location_id' => '19',
      'parent' => '1698',
      'nid' => 22,
      'path' => '/locations/shoreview_ymca/',
    ],
    // Southdale YMCA.
    [
      'location_id' => '18',
      'parent' => '1690',
      'nid' => 23,
      'path' => '/locations/southdale_ymca/',
    ],
    // West St. Paul YMCA.
    [
      'location_id' => '16',
      'parent' => '1705',
      'nid' => 24,
      'path' => '/locations/west_st_paul_ymca/',
    ],
    // White Bear Area YMCA.
    [
      'location_id' => '4',
      'parent' => '1710',
      'nid' => 25,
      'path' => '/locations/white_bear_area_ymca/',
    ],
    // Woodbury YMCA.
    [
      'location_id' => '15',
      'parent' => '1714',
      'nid' => 26,
      'path' => '/locations/woodbury_ymca/',
    ],
  ];

  foreach ($items as $item) {
    // Add "Personal Trainer Schedules" menu item.
    $url = 'internal:/node/' . $item['nid'] . '/personal-trainer-schedules';
    $results_url = 'internal:/node/' . $item['nid'] . '/personal-trainer-schedules/results';

    if (!empty($item['parent'])) {
      $parent_menu_item = MenuLinkContent::load($item['parent']);
    }

    // Create alias for PT form on location page.
    $suffix = 'health__fitness/personal_training/personal-trainer-schedules';
    $source = '/node/' . $item['nid'] . '/personal-trainer-schedules';
    $alias = $item['path'] . $suffix;
    \Drupal::service('path.alias_storage')->save($source, $alias, 'en');

    $menu_item_definition = [
      'title' => 'Personal Trainer Schedules',
      'link' => ['uri' => $url],
      'menu_name' => 'locations',
      'parent' => !empty($parent_menu_item) ? 'menu_link_content:' . $parent_menu_item->uuid() : '',
      'enabled' => FALSE,
      'weight' => -5,
    ];
    $menu_item = MenuLinkContent::create($menu_item_definition);
    $menu_item->save();

    // Add "Results" menu item.
    $menu_subitem_definition = [
      'title' => 'Personal Trainer Schedules Results',
      'link' => ['uri' => $results_url],
      'menu_name' => 'locations',
      'parent' => !empty($menu_item) && !empty($parent_menu_item) ? 'menu_link_content:' . $menu_item->uuid() : '',
      'enabled' => FALSE,
    ];
    $menu_item = MenuLinkContent::create($menu_subitem_definition);
    $menu_item->save();

    // Create alias for PT results on location page.
    $suffix = 'health__fitness/personal_training/personal-trainer-schedules/results';
    $source = '/node/' . $item['nid'] . '/personal-trainer-schedules/results';
    $alias = $item['path'] . $suffix;
    \Drupal::service('path.alias_storage')->save($source, $alias, 'en');
  }
}

/**
 * Add new templates to ckeditor.
 */
function ymca_master_update_8152() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'editor.editor.full_html.yml',
    ]
  );
}

/**
 * Install module YMCA retention and Views Rest Feed.
 */
function ymca_master_update_8153() {
  \Drupal::service('module_installer')->install([
    'views_rest_feed',
    'ymca_retention',
  ], TRUE);

  // Create YMCA Retention activities terms.
  module_load_include('inc', 'ymca_retention', 'includes/ymca_retention.terms');
  _ymca_retention_terms_create();
}

/**
 * User's dashboard.
 */
function ymca_master_update_8154() {
  \Drupal::service('module_installer')->install(array('views_advanced_routing'), TRUE);
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.settings.yml',
      $path . 'views.view.my_content.yml'
    ]
  );
}

/**
 * Add new templates to ckeditor.
 */
function ymca_master_update_8156() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'editor.editor.full_html.yml',
    ]
  );
}

/**
 * Create top menu 2 links.
 */
function ymca_master_update_8157() {
  // Add top level items.
  $menu_item = MenuLinkContent::create([
    'title' => 'Sign In',
    'link' => ['uri' => 'internal:/personify/login'],
    'menu_name' => 'top_menu_2',
    'weight' => 1,
  ]);
  $menu_item->save();

  $account_menu_link = MenuLinkContent::create([
    'title' => 'Account',
    'link' => ['uri' => 'internal:/personify/account'],
    'menu_name' => 'top_menu_2',
    'expanded' => TRUE,
    'weight' => 2,
  ]);
  $account_menu_link->save();

  $inner_items = [
    [
      'title' => 'My Account',
      'link' => ['uri' => 'internal:/personify/account'],
      'menu_name' => 'top_menu_2',
      'parent' => $account_menu_link->getPluginId(),
      'weight' => 1,
    ],
    [
      'title' => 'Sign Out',
      'link' => ['uri' => 'internal:/personify/sign_out'],
      'menu_name' => 'top_menu_2',
      'parent' => $account_menu_link->getPluginId(),
      'weight' => 2,
    ],
  ];

  foreach ($inner_items as $item) {
    $menu_item = MenuLinkContent::create($item);
    $menu_item->save();
  }
}

/**
 * Add trainers mapping view.
 */
function ymca_master_update_8158() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.trainers_mapping.yml',
    ]
  );
}

/**
 * Allow contributor administer files.
 */
function ymca_master_update_8159() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
    ]
  );
}

/**
 * Fix badly cloned pages.
 */
function ymca_master_update_8160() {
  $storage = \Drupal::entityTypeManager()->getStorage('page');
  $result = $storage->getQuery()->execute();
  foreach ($result as $id => $name) {
    /** @var \Drupal\page_manager\Entity\Page $page */
    $page = $storage->load($id);
    if ($page->getAccessConditions()->has(0)) {
      $config = $page->getAccessCondition(0)->getConfiguration();
      $page->removeAccessCondition(0);
      $page->getAccessConditions()->addInstanceId($config['uuid'], $config);
      $page->save();
      \Drupal::logger(__FUNCTION__)->info("The page: $name has been fixed about access conditions.");
    }
  }
}

/**
 * User's dashboard.
 */
function ymca_master_update_8161() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.my_content.yml'
    ]
  );
}

/**
 * Enable YMCA Mobile Check-in module.
 */
function ymca_master_update_8162() {
  \Drupal::service('module_installer')->install(['ymca_mobile_checkin'], TRUE);
}

/**
 * YMCA-1025: Allow interns and contributors administer files.
 */
function ymca_master_update_8163() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml'
    ]
  );
}

/**
 * Allow interns and contributors access workflow_unpublished states.
 */
function ymca_master_update_8164() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml',
      $path . 'workflow.transition.workflow_unpublished_draft.yml',
      $path . 'workflow.transition.workflow_unpublished_needs_review.yml'
    ]
  );
}

/**
 * YMCA-838: Allow Location Editors to edit only location files.
 */
function ymca_master_update_8165() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.location_editor.yml',
    ]
  );
}

/**
 * Import ymca theme settings.
 */
function ymca_master_update_8166() {
  $path = 'themes/custom/ymca/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca.settings.yml'
    ]
  );
}

/**
 * YMCA-1001: Allow interns to clone pages.
 */
function ymca_master_update_8167() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.intern.yml'
    ]
  );
}

/**
 * User's dashboard.
 */
function ymca_master_update_8168() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.my_content.yml'
    ]
  );
}

/**
 * Add a new plugin to ckeditor.
 */
function ymca_master_update_8169() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'editor.editor.full_html.yml',
    ]
  );
}

/**
 * YMCA-1001: Add permission to edit own page manager pages only.
 */
function ymca_master_update_8170() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.contributor.yml',
      $path . 'user.role.intern.yml'
    ]
  );
}

/**
 * Make favicons configurable.
 */
function _ymca_master_update_8171() {
  $srcDir = drupal_get_path('theme', 'ymca') . '/img/favicon/';
  $destDir = 'public://favicon/';
  drupal_mkdir($destDir, 0666);
  $config = \Drupal::service('config.factory')->getEditable('system.theme.global');
  $fileMap = [
    'default' => [
      'from' => 'favicon.ico',
      'to' => 'default.ico'
    ],
    'camp' => [
      'from' => 'favicon-alt.ico',
      'to' => 'camp.ico'
    ],
    'location' => [
      'from' => 'favicon-locations.ico',
      'to' => 'location.ico'
    ]
  ];
  $fileUsage = \Drupal::service('file.usage');
  foreach ($fileMap as $key => $fileItem) {
    $fileUri = $destDir . $fileItem['to'];
    @file_unmanaged_copy($srcDir . $fileItem['from'], $destDir . $fileItem['to']);
    $file = EntityFile::create([
      'uid' => 1,
      'filename' => $fileItem['to'],
      'uri' => $fileUri,
      'status' => FILE_STATUS_PERMANENT,
    ]);
    $file->save();
    $fid = $file->id();
    $fileUsage->add($file, 'ymca_master', 'favicon', $fid);
    $config->set('ymca_favicon_' . $key, [$fid]);
  }
  $config->save();
}

/**
 * Install Groupex From Cache.
 */
function ymca_master_update_8172() {
  \Drupal::service('module_installer')->install(['groupex_form_cache'], TRUE);
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.groupex_form_cache.groupex_form_cache.default.yml',
      $path . 'core.entity_view_display.groupex_form_cache.groupex_form_cache.default.yml',
      $path . 'field.field.groupex_form_cache.groupex_form_cache.field_gfc_created.yml',
      $path . 'field.field.groupex_form_cache.groupex_form_cache.field_gfc_options.yml',
      $path . 'field.field.groupex_form_cache.groupex_form_cache.field_gfc_response.yml',
      $path . 'field.storage.groupex_form_cache.field_gfc_created.yml',
      $path . 'field.storage.groupex_form_cache.field_gfc_options.yml',
      $path . 'field.storage.groupex_form_cache.field_gfc_response.yml',
    ]
  );
}

/**
 * Updates format configs adding color buttons.
 */
function ymca_master_update_8173() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(array('colorbutton'), TRUE);
  drupal_flush_all_caches();
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'editor.editor.full_html.yml',
    ]
  );
}

/**
 * YMCA-1105: Refactor ymca_google.
 */
function ymca_master_update_8174() {
  $config = \Drupal::service('config.factory')->getEditable('ymca_google.settings');
  $config->set('is_production', 0);
  $config->save();
}

/**
 * YMCA-1105: Add field for Google event.
 */
function ymca_master_update_8175() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.groupex_google_cache.groupex_google_cache.default.yml',
      $path . 'core.entity_view_display.groupex_google_cache.groupex_google_cache.default.yml',
      $path . 'field.field.groupex_google_cache.groupex_google_cache.field_gg_google_event.yml',
      $path . 'field.storage.groupex_google_cache.field_gg_google_event.yml',
    ]
  );
}

/**
 * Update locations schedule content field value.
 */
function ymca_master_update_8176() {
  $renderer = \Drupal::service('renderer');
  $mapping_repository = \Drupal::service('ymca_mappings.location_repository');

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $location_nids = \Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->execute();
  foreach ($location_nids as $nid) {
    $mapping = $mapping_repository->findByLocationId($nid);
    if (!$mapping || !$mapping->hasField('field_location_personify_brcode') ||
      !$brcode = $mapping->field_location_personify_brcode->getValue()[0]['value']
    ) {
      \Drupal::logger('ymca_master')
        ->notice('Location with nid @nid has not been updated because it doesn\'t have associated Personify branch id', [
          '@nid' => $nid,
        ]);
      continue;
    }

    $build = [
      '#type' => 'inline_template',
      '#template' => '{% include "@ymca_groupex/groupex-individual-location-links.html.twig" %}',
      '#context' => ['branch_id' => $brcode],
    ];

    $node = $node_storage->load($nid);
    $node->set('field_schedule_content', [
      'value' => (string) $renderer->renderRoot($build),
      'format' => 'full_html'
    ]);
    $node->save();
  }
}
