<?php

/**
 * @file
 * Contains hooks for ymca_menu module.
 */

define('YMCA_MENU_CACHE_CID', 'ymca_menu:menu');

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\ymca_menu\Controller\YMCAMenuController;

/**
 * Implements hook_help().
 */
function ymca_menu_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'ymca_menu.menu_list_config':
      $output = '';
      $output .= '<h3>' . t('About a form') . '</h3>';
      $output .= '<p>' . t(
          'This interface helps to administer ordering of menu trees for Mobile Menu and allows user to set/unset menus available for A/B testing selection as well as displaying them through the site.'
        ) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t(
          'Drag and drop the elements for reordering them. Enable/disable if you need to show/hide menus from a site. Disabled menus will be accessible via admin interface.'
        ) . '</p>';
      $output .= '<p>' . t(
          'For hardly cached site sections please make sure you cleared global cache for getting changes.'
        ) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function ymca_menu_theme($existing, $type, $theme, $path) {
  return [
    'sidebar_navigation' => [
      'variables' => [
        'content' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'sidebar-navigation',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function ymca_menu_page_attachments(array &$attachments) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $mlid = FALSE;
  if (in_array($route_name, ['entity.node.canonical', 'entity.node.preview'])) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($route_name == 'entity.node.preview') {
      $node = \Drupal::routeMatch()->getParameter('node_preview');
    }
    $context = \Drupal::service('pagecontext.service')->getContext();
    if ($node->bundle() == 'blog' && $context && ($context->bundle(
        ) == 'camp' || $context->bundle() == 'location')
    ) {
      $route_parameters = ['node' => $context->id()];
      $menu_name = $context->bundle() . 's';
      // Search News & Events page of context camp.
      $links = \Drupal::service('plugin.manager.menu.link')
        ->loadLinksByRoute(
          'ymca_blog_listing.news_events_page_controller',
          $route_parameters,
          $menu_name
        );
      if ($links) {
        // Select the first matching link.
        $found = reset($links);
        if ($found->isEnabled()) {
          $connection = Database::getConnection();
          $query = $connection
            ->select('menu_tree', 'mt')
              ->fields('mt', array('mlid'))
              ->condition('id', $found->getPluginId());
          $mlid = (int) $query->execute()->fetchField();
        }
      }
    }
  }
  if (!$mlid) {
    $menus = YMCAMenuController::menuList();
    $context = \Drupal::service('pagecontext.service')->getContext();
    if ($context && in_array($context->bundle(), ['location', 'camp'])) {
      // Alter menu list to prioritize corresponding menus for locations/camps.
      switch ($context->bundle()) {
        case 'location':
          array_unshift($menus, 'locations');
          break;

        case 'camp':
          array_unshift($menus, 'camps');
          break;
      }
    }

    foreach ($menus as $menu) {
      /* @var Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $link */
      if ($link = \Drupal::service('menu.active_trail')->getActiveLink($menu)) {
        $connection = Database::getConnection();
        $query = $connection
          ->select('menu_tree', 'mt')
            ->fields('mt', array('mlid'))
            ->condition('id', $link->getPluginId());
        $mlid = (int) $query->execute()->fetchField();
        break;
      }
    }
  }
  $current_path = \Drupal::service('path.current')->getPath();
  // Node preview page workaround.
  if ($route_name == 'entity.node.preview') {
    $current_path = '/node/' . $node->id();
  }
  $attachments['#attached']['drupalSettings']['page'] = array(
    'mlid' => !empty($mlid) ? $mlid : YMCAMenuController::ROOT_ID,
    'liveUrl' => \Drupal::service('path.alias_manager')->getAliasByPath(
        $current_path
    ) . '/',
    'meganav' => \Drupal::config('ymca_menu.main_menu')->get('items'),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function ymca_menu_preprocess_node(&$variables) {
  $node = &$variables['node'];
  // Only proceed with full & default view modes.
  if (!in_array($variables['view_mode'], ['full', 'default'])) {
    return;
  }
  // Only blogs and content types with sidebar navigation field are supposed
  // to have sidebar.
  if ($node->hasField('field_sidebar_navigation') || $node->bundle(
    ) == 'blog'
  ) {
    // Skip nodes with 'sidebar navigation' field set to 'No'.
    if ($node->hasField('field_sidebar_navigation')) {
      $value = $node->field_sidebar_navigation->getValue();
      if (empty($value[0]['value'])) {
        return;
      }
    }
    // Output sidebar navigation block.
    $variables['sidebar_navigation'] = [
      '#lazy_builder' => [
        '\Drupal\block\BlockViewBuilder::lazyBuilder',
        ['sidebarnavigation']
      ],
      '#create_placeholder' => TRUE,
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ymca_menu_menu_link_content_insert(EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
  \Drupal::cache()->delete('ymca_menu_buildTree');

}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ymca_menu_menu_link_content_update(EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
  \Drupal::cache()->delete('ymca_menu_buildTree');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function ymca_menu_menu_link_content_delete(EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
  \Drupal::cache()->delete('ymca_menu_buildTree');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 *
 * Adds menu item 'Exclude from nav' field to the node form.
 *
 * @see ymca_menu_form_node_form_submit()
 */
function ymca_menu_form_node_form_alter(
  &$form,
  FormStateInterface $form_state
) {
  // If menu_ui haven't altered the form, there is nothing to display.
  if (!isset($form['menu'])) {
    return;
  }

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'ymca_menu_form_node_form_submit';
    }
  }

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#validate'][] = 'ymca_menu_form_node_form_validate';
    }
  }
  // Generate a list of possible parents (not including this link or descendants).
  // @todo This must be handled in a #process handler.
  $node = $form_state->getFormObject()->getEntity();
  $defaults = menu_ui_get_menu_link_defaults($node);
  // If menu link item is not created, there is nothing to display.
  if (!$defaults['id']) {
    return;
  }
  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $node->type->entity;
  /** @var \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_selector */
  $menu_parent_selector = \Drupal::service('menu.parent_form_selector');
  $menu_names = menu_ui_get_menus();
  $type_menus = $node_type->getThirdPartySetting(
    'menu_ui',
    'available_menus',
    array('main')
  );
  $available_menus = array();
  foreach ($type_menus as $menu) {
    $available_menus[$menu] = $menu_names[$menu];
  }
  if ($defaults['id']) {
    $default = $defaults['menu_name'] . ':' . $defaults['parent'];
  }
  else {
    $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
  }
  $parent_element = $menu_parent_selector->parentSelectElement(
    $default,
    $defaults['id'],
    $available_menus
  );
  // If no possible parent menu items were found, there is nothing to display.
  if (empty($parent_element)) {
    return;
  }

  $menu_link = MenuLinkContent::load($defaults['entity_id']);
  $form['menu']['menu_link_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude from nav'),
    '#description' => t(
      'Excluding page from mega nav, sidebar, sticky and mobile menus'
    ),
    '#default_value' => !$menu_link->isEnabled(),
    '#states' => array(
      'invisible' => array(
        'input[name="menu[enabled]"]' => array('checked' => FALSE),
      ),
    ),
  );
}

/**
 * Form submission handler for 'Exclude from nav' checkbox on the node form.
 *
 * @see ymca_menu_form_node_form_alter()
 */
function ymca_menu_form_node_form_submit(
  $form,
  FormStateInterface $form_state
) {
  if (!$form_state->isValueEmpty('menu')) {
    $values = $form_state->getValue('menu');
    if (!empty($values['enabled']) && trim($values['title'])) {
      /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
      if (!empty($values['entity_id'])) {
        $entity = MenuLinkContent::load($values['entity_id']);
        $enabled = (int) (!$values['menu_link_disabled']);
        if ($entity->enabled->value != $enabled) {
          $entity->enabled->value = $enabled;
          $entity->save();
        }
      }
    }
  }

  // Update node alias.
  $path = $form_state->getValue('path');
  $nid = $form_state->getValue('nid');
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $node_storage->resetCache(array($nid));
  $node = $node_storage->load($nid);
  if ($node->bundle() == 'article' && empty($path[0]['alias'])) {
    // Check whether we need to update an alias.
    $alias = Drupal::service('ymca_aliases.node_alias')->getAlias($node);
    if (empty($alias)) {
      return;
    }
    $source = '/node/' . $nid;
    $existing = Drupal::service('path.alias_storage')->load(
      ['source' => $source]
    );
    $pid = !empty($existing['pid']) ? $existing['pid'] : NULL;
    \Drupal::service('path.alias_storage')->save($source, $alias, 'en', $pid);
  }
}

/**
 * Form validation handler for 'Exclude from nav' checkbox on the node form.
 *
 * @see ymca_menu_form_node_form_alter()
 */
function ymca_menu_form_node_form_validate(
  $form,
  FormStateInterface $form_state
) {

  // Check node alias.
  $path = $form_state->getValue('path');
  $title = $form_state->getValue('title');

  $bi = $form_state->getBuildInfo();
  /** @var \Drupal\node\NodeForm $co */
  $co = $bi['callback_object'];
  /** @var \Drupal\node\Entity\Node $node */
  $node = $co->getEntity();
  $node->set('title', $title[0]['value']);
  /** @var \Drupal\node\Entity\NodeType $node_type */
  $node_type = $node->type->entity;
  $node_type->setThirdPartySetting(
    'menu_ui',
    'parent',
    $form_state->getValue('menu')['menu_parent']
  );

  if ($node->bundle() == 'article' && empty($path[0]['alias'])) {
    // Check whether we need to update an alias.
    $alias = Drupal::service('ymca_aliases.node_alias')->getAlias($node);
    if (empty($alias)) {
      return;
    }
    $existing = Drupal::service('path.alias_storage')->load(
      ['alias' => $alias]
    );
    if (!empty($existing['pid'])) {
      $form_state->setErrorByName(
        'alias',
        t('The alias %alias is already in use.', array('%alias' => $alias))
      );
    }
  }
  $node->validate();
}

/**
 * Implements hook_entity_type_alter().
 */
function ymca_menu_entity_type_alter(array &$entity_types) {
  // Override menu list builder form.
  $entity_types['menu']->setListBuilderClass(
    'Drupal\ymca_menu\MenuListBuilder'
  );
}
