<?php

/**
 * @file
 * Contains ymca_mindbody.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function ymca_mindbody_theme($existing, $type, $theme, $path) {
  return [
    'mindbody_results_content' => [
      'variables' => [
        'location' => '',
        'program' => '',
        'session_type' => '',
        'trainer' => '',
        'datetime' => '',
        'back_link' => '',
        'start_again_link' => '',
        'base_path' => '',
        'telephone' => '',
        'days' => [],
      ],
      'template' => 'mindbody-results-content',
    ],
    'mindbody_products_list' => [
      'variables' => [
        'products_to_display_member' => [],
        'products_to_display_non_member' => [],
        'modal_content' => '',
      ],
      'template' => 'mindbody-products-list',
    ],
    'mindbody_products_list_location' => [
      'variables' => [
        'products_to_display_member' => [],
        'products_to_display_non_member' => [],
      ],
      'template' => 'mindbody-products-list-location',
    ],
    'mindbody_products_list_modal' => [
      'variables' => [
        'products_to_display_member' => [],
        'products_to_display_non_member' => [],
      ],
      'template' => 'mindbody-products-list-modal',
    ],
  ];
}

/**
 * Implements hook_token_info().
 */
function ymca_mindbody_token_info() {
  $info['tokens']['node']['schedule-pt-location-url'] = [
    'name' => t('Schedule Personal Training'),
    'description' => t('The URL to MindBody form with pre-populated location'),
    'type' => 'url',
  ];
  $info['tokens']['node']['schedule-pt-trainer-url'] = [
    'name' => t('Schedule Appointment with'),
    'description' => t('The URL to MindBody form with pre-populated trainer'),
    'type' => 'url',
  ];
  $info['tokens']['node']['list-of-products-pt'] = [
    'name' => t('List of Personify products'),
    'description' => t('Provides an expander block with list of personify products'),
    'type' => 'markup',
  ];
  $info['tokens']['node']['list-of-products-pt-location'] = [
    'name' => t('List of Personify products for location'),
    'description' => t('Provides an expander block with list of personify products'),
    'type' => 'markup',
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function ymca_mindbody_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'node') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'schedule-pt-location-url':
          if (isset($data['node']) && $data['node'] instanceof NodeInterface) {
            /* @var $site_section \Drupal\node\NodeInterface */
            if ($site_section = \Drupal::service('pagecontext.service')->getContext()) {

              $location_repo = \Drupal::service('ymca_mappings.location_repository');
              if ($mapping = $location_repo->findByLocationId($site_section->id())) {
                $field_mindbody_id = $mapping->field_mindbody_id->getValue();
                $location = isset($field_mindbody_id[0]['value']) ? $field_mindbody_id[0]['value'] : FALSE;
                $url_options = [
                  'query' => [
                    'location' => $location,
                    'context' => 'location',
                  ],
                ];
                $link = new Link(t('Schedule Personal Training'), Url::fromRoute('ymca_mindbody.location.pt', ['node' => $site_section->id()], $url_options));
                $replacements[$original] = $link->toString();
              }

            }
          }
          break;

        case 'schedule-pt-trainer-url':
          if (isset($data['node']) && $data['node'] instanceof NodeInterface) {
            /* @var $node \Drupal\node\NodeInterface */
            $node = $data['node'];
            /* @var $site_section \Drupal\node\NodeInterface */
            if ($site_section = \Drupal::service('pagecontext.service')->getContext()) {

              $location_repo = \Drupal::service('ymca_mappings.location_repository');
              if ($mapping = $location_repo->findByLocationId($site_section->id())) {

                $field_mindbody_id = $mapping->field_mindbody_id->getValue();
                $location = isset($field_mindbody_id[0]['value']) ? $field_mindbody_id[0]['value'] : FALSE;
                $field_location_id = $mapping->field_location_ref->getValue();
                $location_id = isset($field_location_id[0]['target_id']) ? $field_location_id[0]['target_id'] : FALSE;
                $node_title = explode(' ', $node->getTitle());

                $trainer_repo = \Drupal::service('ymca_mappings.trainer_repository');
                if ($mapping = $trainer_repo->findByPageId($node->id())) {
                  $field_mindbody_trainer_id = $mapping->field_mindbody_trainer_id->getValue();
                  $trainer = isset($field_mindbody_trainer_id[0]['value']) ? $field_mindbody_trainer_id[0]['value'] : FALSE;
                  $url_options = [
                    'query' => [
                      'location' => $location,
                      'trainer' => $trainer,
                      'context' => 'trainer',
                    ],
                  ];
                  $link = new Link(t('Schedule Appointment with @title', ['@title' => $node_title[0]]), Url::fromRoute('ymca_mindbody.location.pt', ['node' => $location_id], $url_options));
                  $replacements[$original] = $link->toString();
                }

              }
            }
          }
          break;

        case 'list-of-products-pt':
          $mapping_repository = \Drupal::service('ymca_mappings.personify_product_repository');
          $mappings = $mapping_repository->loadAll();
          $products_to_display_member = $products_to_display_non_member = [];
          foreach ($mappings as $mapping) {
            $product_code_array = explode('_', $mapping->field_product_code->getValue()[0]['value']);
            if (empty($mapping->field_location_ref->getValue())) {
              $product_member_price = $mapping->field_member_price->getValue()[0]['value'];
              $product_non_member_price = $mapping->field_nonmember_price->getValue()[0]['value'];
              $products_to_display_member[$product_code_array[4]][] = [
                'price' => $product_member_price,
                'session' => $product_code_array[4],
                'package' => $product_code_array[2],
              ];
              $products_to_display_non_member[$product_code_array[4]][] = [
                'price' => $product_non_member_price,
                'session' => $product_code_array[4],
                'package' => $product_code_array[2],
              ];
            }
            else {
              $settings['products_codes'][$mapping->field_product_code->getValue()[0]['value']] = [$mapping->field_productid->getValue()[0]['value']];
              $product_location_ids[$product_code_array[0]] = $product_code_array[0];
            }
          }
          ksort($products_to_display_member);
          ksort($products_to_display_non_member);
          if (isset($products_to_display_member[30])) {
            asort($products_to_display_member[30]);
          }
          if (isset($products_to_display_member[60])) {
            asort($products_to_display_member[60]);
          }
          if (isset($products_to_display_non_member[30])) {
            asort($products_to_display_non_member[30]);
          }
          if (isset($products_to_display_non_member[60])) {
            asort($products_to_display_non_member[60]);
          }
          $mapping_repository_location = \Drupal::service('ymca_mappings.location_repository');
          $mappings_location = $mapping_repository_location->findByLocationPersonifyBranchCode($product_location_ids);
          $modal_content = [];
          foreach ($mappings_location as $mapping) {
            $modal_content[] = [
              'name' => $mapping->getName(),
              'id' => $mapping->field_location_personify_brcode->getValue()[0]['value'],
            ];
          }
          $config = Drupal::config('ymca_mindbody.settings');
          $settings['personify_product_url'] = $config->get('personify_product_url');
          $variables = [
            '#theme' => 'mindbody_products_list',
            '#attached' => [
              'library' => [
                'ymca_mindbody/ymca_mindbody',
              ],
              'drupalSettings' => $settings,
            ],
            '#products_to_display_member' => $products_to_display_member,
            '#products_to_display_non_member' => $products_to_display_non_member,
            '#modal_content' => $modal_content,
          ];
          $replacements[$original] = render($variables);
          break;

        case 'list-of-products-pt-location':
          if ($site_section = \Drupal::service('pagecontext.service')->getContext()) {
            $location_repo = \Drupal::service('ymca_mappings.location_repository');
            if ($mapping = $location_repo->findByLocationId($site_section->id())) {
              $field_location_personify_brcode = $mapping->field_location_personify_brcode->getValue();
              $location = isset($field_location_personify_brcode[0]['value']) ? $field_location_personify_brcode[0]['value'] : FALSE;
              $mapping_repository = \Drupal::service('ymca_mappings.personify_product_repository');
              $mappings = $mapping_repository->loadAll();
              $products_to_display_member = $products_to_display_non_member = [];
              $config = \Drupal::config('ymca_mindbody.settings');
              $personify_product_url = $config->get('personify_product_url');
              foreach ($mappings as $mapping) {
                $product_code_array = explode('_', $mapping->field_product_code->getValue()[0]['value']);
                if ($product_code_array[0] == $location) {
                  $product_member_price = $mapping->field_member_price->getValue()[0]['value'];
                  $product_non_member_price = $mapping->field_nonmember_price->getValue()[0]['value'];
                  $products_to_display_member[$product_code_array[4]][$product_code_array[2]] = [
                    'price' => $product_member_price,
                    'session' => $product_code_array[4],
                    'package' => $product_code_array[2],
                    'url' => $personify_product_url . $mapping->field_productid->getValue()[0]['value'],
                  ];
                  $products_to_display_non_member[$product_code_array[4]][$product_code_array[2]] = [
                    'price' => $product_non_member_price,
                    'session' => $product_code_array[4],
                    'package' => $product_code_array[2],
                    'url' => $personify_product_url . $mapping->field_productid->getValue()[0]['value'],
                  ];
                }
              }
              ksort($products_to_display_member);
              ksort($products_to_display_non_member);
              if (isset($products_to_display_member[30])) {
                asort($products_to_display_member[30]);
              }
              if (isset($products_to_display_member[60])) {
                asort($products_to_display_member[60]);
              }
              if (isset($products_to_display_non_member[30])) {
                asort($products_to_display_non_member[30]);
              }
              if (isset($products_to_display_non_member[60])) {
                asort($products_to_display_non_member[60]);
              }
              $variables = [
                '#theme' => 'mindbody_products_list_location',
                '#products_to_display_member' => $products_to_display_member,
                '#products_to_display_non_member' => $products_to_display_non_member,
              ];
              $replacements[$original] = render($variables);
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_mindbody_cache_proxy_update_stats().
 */
function ymca_mindbody_mindbody_cache_proxy_update_stats($data) {
  $config = Drupal::config('mindbody_cache_proxy.settings');
  if ($data->miss == $config->get('calls')) {
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['mindbody_state']);
  }
}

/**
 * Implements hook_mindbody_cache_proxy_flush_stats().
 */
function ymca_mindbody_mindbody_cache_proxy_flush_stats($data) {
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['mindbody_state']);
}

/**
 * Implements hook_mail().
 */
function ymca_mindbody_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_trainer':

      $body = [
        "<p>$params[trainer_name],</p>",
        "$params[client_name] has scheduled an appointment with you at $params[start_date].</p>",
        "<p>If you need to change this appointment, please contact:</p>",
        "<ul>",
        "<li>Name: $params[client_name]</li>",
        "<li>Email: $params[client_email]</li>",
        "<li>Phone: $params[client_phone]</li>",
        "</ul>",
        "<p>Thank you!<br />",
        "The $params[location] Team</p>",
      ];

      $message['subject'] = "Online Booking Confirmation for $params[start_date]";
      $message['body'][] = implode('', $body);

      break;

    case 'notify_customer':
      $body = [
        "<p>$params[client_name],</p>",
        "<p>You have scheduled an appointment with $params[trainer_name] at $params[start_date].</p>",
        "<p>If you need to change this appointment, please contact:</p>",
        "<ul>",
        "<li>Name: $params[trainer_name]</li>",
        "<li>Email: $params[trainer_email]</li>",
        "<li>Phone: $params[trainer_phone]</li>",
        "</ul>",
        "<p>Thank you!<br />",
        "The $params[location] Team</p>",
      ];

      $message['subject'] = "Online Booking Confirmation for $params[start_date].";
      $message['body'][] = implode('', $body);

      break;

    case 'notify_location_trainers':
      $body = [
        "<p>$params[trainer_name],</p>",
        "<p>$params[client_name] has purchased $params[item_name]. Please follow up with $params[client_name] to schedule sessions.</p>",
        "<p>Order/Customer information:</p>",
        "<ul>",
        "<li>MindBody SaleID: $params[mb_sale_id]</li>",
        "<li>Personify OrderNo: $params[personify_order_no]</li>",
        "<li>Personify OrderLineNo: $params[personify_order_line_no]</li>",
        "<li>Name: $params[client_name]</li>",
        "<li>Email: $params[client_email]</li>",
        "<li>Phone: $params[client_phone]</li>",
        "</ul>",
        "<p>Thank you!<br />",
        "The $params[location] Team</p>",
      ];

      $message['subject'] = "$params[client_name] has purchased $params[item_name].";
      $message['body'][] = implode('', $body);
      break;

    case 'notify_location_trainer_saleid':
      $body = [
        "<p>$params[trainer_name],</p>",
        "<p>$params[client_name] has purchased $params[item_name], but we cannot automatically assign SaleID for that order.</p>",
        "<p>Please contact site admin to resolve that issue.</p>",
        "<p>Customer information:</p>",
        "<ul>",
        "<li>Personify OrderNo: $params[personify_order_no]</li>",
        "<li>Personify OrderLineNo: $params[personify_order_line_no]</li>",
        "<li>Name: $params[client_name]</li>",
        "<li>Email: $params[client_email]</li>",
        "<li>Phone: $params[client_phone]</li>",
        "</ul>",
        "<p>Thank you!<br />",
        "The $params[location] Team</p>",
      ];

      $message['subject'] = "Cannot assign SaleID for purchase by $params[client_name], $params[item_name].";
      $message['body'][] = implode('', $body);
      break;

    case 'notify_order_cancel':
      $body = [
        "<p>$params[trainer_name],</p>",
        "<p>$params[client_name] has received a refund for $params[item_name]. Please remember to go into MINDBODY and delete this item from $params[client_name]'s account details.</p>",
        "<ul>",
        "<li>Personify Order #: $params[personify_order_no]</li>",
        "<li>Personify Order Line #: $params[personify_order_line_no]</li>",
        "<li>MINDBODY Sale ID: $params[mb_sale_id]</li>",
        "<li>Client email: $params[client_email]</li>",
        "<li>Client phone: $params[client_phone]</li>",
        "</ul>",
        "<p>Please follow up with <CLIENTNAME> if you believe this is inaccurate.</p>",
        "<p>Thank you!<br />",
        "The $params[location] Team<br />",
        "Web: <a href=\"http://ymcamn.org\">http://ymcamn.org</a></p>",
      ];

      $message['subject'] = "MINDBODY refund for $params[client_name] for $params[item_name].";
      $message['body'][] = implode('', $body);
      break;
  }
}
