<?php

/**
 * @file
 * Contains ymca_blocks.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\text\Plugin\Field\FieldType\TextLongItem;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function ymca_blocks_theme($existing, $type, $theme, $path) {
  return [
    'expander_block' => [
      'variables' => [
        'header' => NULL,
        'content' => NULL,
        'entity' => NULL,
      ],
      'template' => 'expander-block',
    ],
    'promo_block' => [
      'variables' => [
        'header' => NULL,
        'image' => NULL,
        'content' => NULL,
        'link' => NULL,
        'link_text' => NULL,
        'is_home' => NULL,
      ],
      'template' => 'promo-block',
    ],
    'sidebar_navigation_block' => [
      'variables' => [
        'content' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'sidebar-navigation-block',
    ],
    'alert_block' => [
      'variables' => [
        'title' => t('Special Alert'),
        'message' => NULL,
        'inner_attributes' => NULL,
        'show' => FALSE,
      ],
      'template' => 'alert-block',
    ],
    'sub_navigation_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'template' => 'sub-navigation-block',
    ],
    'masthead_navigation_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'template' => 'masthead-navigation-block',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function ymca_blocks_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\block_content\Entity\BlockContent $entity */

  switch ($entity->bundle()) {
    case 'date_block':
      \Drupal::service('dateslides.service')->viewAlter($build, $entity);
      break;

    case 'expander_block':
      $content = $entity->field_block_content->get(0);
      if (!$content) {
        \Drupal::logger('ymca_blocks')->notice(t('Content(expander block) is not found for entity: @id', ['@id' => $entity->id()]));
        break;
      }
      $build['expander'] = array(
        '#theme' => 'expander_block',
        '#header' => $entity->field_block_header->value,
        '#content' => array(
          '#type' => 'processed_text',
          '#text' => $content->value,
          '#format' => $content->format,
          '#langcode' => $content->getLangcode(),
        ),
        '#entity' => $entity,
        '#cache' => [
          'tags' => ['ymca_cron']
        ],
      );

      // TODO: Not required now, should live in theme.
      // $build['#attached']['library'][] = 'ymca_blocks/expander-block';.
      break;

    case 'promo_block':
      // Get path for promo block.
      if ($entity->field_link->get(0)) {
        $url = $entity->field_link->get(0)->getUrl();
      }
      if (isset($url)) {
        if ($url->isRouted()) {
          $route = $url->getRouteName();
          $params = $url->getRouteParameters();
          $path = \Drupal::urlGenerator()->generateFromRoute($route, $params);
        }
        else {
          $path = $url->getUri();
          $path = preg_replace('/^base:/', '', $path);
        }
      }

      // Get image, if exists.
      if (isset($build['field_image'][0])) {
        $image_item_values = $build['field_image'][0]['#item']->getValue();
        $image_file = File::load($image_item_values['target_id']);
        $image = \Drupal::service('image.factory')->get($image_file->getFileUri());
        $image_build = [
          '#theme' => 'image',
          '#uri' => $image->getSource(),
          '#alt' => isset($image_item_values['alt']) ? $image_item_values['alt'] : '',
        ];
      }

      // Get content.
      if (isset($build['field_block_content'][0])) {
        $content_build = $build['field_block_content'][0];
        $text = $content_build['#text'];
        // Wrap content in <p> tag if needed.
        if (substr($text, 0, 3) !== '<p>') {
          $content_build['#text'] = '<p>' . $text . '</p>';
        }
      }

      $build['promo'] = array(
        '#theme' => 'promo_block',
        '#header' => html_entity_decode($entity->field_block_header->value),
        '#content' => isset($content_build) ? $content_build : NULL,
        '#image' => isset($image_build) ? $image_build : NULL,
        '#link' => isset($path) ? $path : '',
        '#link_text' => $entity->field_link->title,
        '#is_home' => \Drupal::service('path.matcher')->isFrontPage() ? TRUE : FALSE,
      );

      hide($build['field_block_header']);
      hide($build['field_block_content']);
      hide($build['field_image']);
      hide($build['field_link']);
      break;

    case 'alert_block':
      // The logic to show/hide the block.
      $status = FALSE;

      // Get timestamp from date field.
      $get_time = function ($field_name) use ($entity) {
        if ($entity->hasField($field_name)) {
          $field_start = $entity->get($field_name);
          if ($field_start->get(0)) {
            $data = $field_start->get(0)->getValue();
          }
          if (!empty($data['value'])) {
            $timezone = &drupal_static('ymca_blocks_block_content_view_alter_timezone');
            if (!isset($timezone)) {
              $timezone = new \DateTimeZone(DATETIME_STORAGE_TIMEZONE);
            }
            $date = \DateTime::createFromFormat(DATETIME_DATETIME_STORAGE_FORMAT, $data['value'], $timezone);
            if ($date instanceof \DateTime) {
              return $date->getTimestamp();
            }
          }
        }
        return NULL;
      };

      $date_start = $get_time('field_start_date');
      $date_end = $get_time('field_end_date');

      if (!$date_start && !$date_end) {
        $status = TRUE;
      }

      if (!$date_start && $date_end) {
        $status = REQUEST_TIME < $date_end;
      }

      if ($date_start && !$date_end) {
        $status = REQUEST_TIME > $date_start;
      }

      if ($date_start && $date_end) {
        $status = (REQUEST_TIME > $date_start) && (REQUEST_TIME < $date_end);
      }

      // Block processing.
      /** @var TextLongItem $field */
      $field = $entity->field_block_content->get(0);
      $value = $field->get('value')->getString();
      $format = $field->get('format')->getString();
      $text = check_markup($value, $format);

      $attributes = new Attribute();
      $attributes->addClass('richtext');
      $attributes->setAttribute('id', 'alert-block-' . $entity->id());
      $build['alert'] = array(
        '#theme' => 'alert_block',
        '#message' => $text,
        '#inner_attributes' => $attributes,
        '#show' => $status,
        '#cache' => [
          'tags' => ['ymca_cron']
        ],
      );

      if ($entity->hasField('field_global_alert')) {
        $is_global = $entity->get('field_global_alert');
        $global_val = $is_global->getValue()[0]['value'];
        if ($global_val == 1) {
          $build['alert']['#title'] = '';
        }
      }

      hide($build['field_block_content']);
      break;
  }
}
