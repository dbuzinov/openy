<?php

/**
 * @file
 * Module file.
 */

use Drupal\entity_browser\Events\Events;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_implements_alter().
 */
function ymca_entity_browser_module_implements_alter(&$implementations, $hook) {
  // Our alter should be the last one.
  if ($hook == 'inline_entity_form_reference_form_alter') {
    $module = 'ymca_entity_browser';
    $group = $implementations[$module];
    unset($implementations[$module]);
    $implementations[$module] = $group;
  }
}

/**
 * Implements hook_inline_entity_form_reference_form_alter().
 */
function ymca_entity_browser_inline_entity_form_reference_form_alter(&$reference_form, FormStateInterface &$form_state) {
  $entity_manager = \Drupal::service('entity.manager');
  \Drupal::service('event_dispatcher')
    ->addListener(
      Events::REGISTER_JS_CALLBACKS,
      'entity_browser_entity_form_reference_register_js'
    );

  /** @var \Drupal\field\FieldConfigInterface $instance */
  $instance = $form_state->get([
    'inline_entity_form',
    $reference_form['#ief_id'],
    'instance'
  ]);

  // @todo Move browser ID to the configuration.
  $entity_browser_id = 'browse_block_modal';
  if ($browser = $entity_manager->getStorage('entity_browser')->load($entity_browser_id)) {
    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
    $display = $browser->getDisplay();

    $reference_form['entity_id'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => ['ief-entity-browser-value'],
      ],
    ];
    $reference_form['entity_browser'] = $display->displayEntityBrowser($form_state);
    $reference_form['#attached']['library'][] = 'entity_browser_entity_form/ief_autocomplete';
    $reference_form['actions']['ief_reference_save']['#ajax']['event'] = 'entities-selected';

    // Add custom validation and submit callbacks as we need to handle
    // multi-value cases.
    $reference_form['#element_validate'][0] = 'entity_browser_entity_form_reference_form_validate';
    $reference_form['#ief_element_submit'][0] = 'entity_browser_entity_form_reference_form_submit';

    // Add cardinality for this widget so that we can handle it later.
    $reference_form['#attached']['drupalSettings']['entity_browser'][$display->getUuid()]['cardinality'] = $instance->getFieldStorageDefinition()->getCardinality();
  }
}

/**
 * Implements hook_form_alter().
 */
function ymca_entity_browser_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form['#id'] == 'views-exposed-form-content-browser-block-entity-browser-1') {
      $types = \Drupal::request()->query->all()['types'];
      $options = array_combine($types, $types);

      unset($form['type']['#options']['All']);
      $form['type']['#options'] = $options;

      // Remove 'All' value from default user input.
      $input = $form_state->getUserInput();
      if ($input['type'] == 'All') {
        $input['type'] = reset($types);
        $form_state->setUserInput($input);
      }
    }
  }
}
