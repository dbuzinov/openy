<?php

/**
 * @file
 * Main module for YPTF updates.
 */

use Drupal\ymca_mappings\Entity\Mapping;

/**
 * Initial hook_updates runner.
 */
function yptf_master_install() {
  for ($i = 8000; $i < 9000; $i++) {
    $function = 'yptf_master_update_' . $i;
    if (function_exists($function)) {
      \Drupal::logger('yptf_master_install')->info('running: ' . $function);
      $function();
    }
  }
}

/**
 * Enable personify_mindbody_sync module.
 */
function yptf_master_update_8000() {
  \Drupal::service('module_installer')->install(['personify_mindbody_sync'], TRUE);
}

/**
 * Create fields.
 */
function yptf_master_update_8001() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.personify_mindbody_cache.personify_mindbody_cache.default.yml',
      $path . 'core.entity_view_display.personify_mindbody_cache.personify_mindbody_cache.default.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_clnt_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_l_num.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_order_num.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_prs_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_date.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_user_id.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_status.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_sale_id.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_clnt_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_l_num.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_order_num.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_prs_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_date.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_user_id.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_status.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_sale_id.yml',
      $path . 'ymca_personify.settings.yml',
    ]
  );
}

/**
 * Configure sync log.
 */
function yptf_master_update_8002() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.personify_mindbody_log.yml',
    ]
  );
}

/**
 * Populate "Personify Product" mappings.
 */
function yptf_master_update_8003() {
  // Read CSV file with map.
  $path = drupal_get_path('module', 'yptf_master');
  $csv_file = $path . '/misc/personal_training_products_with_PID-78637_97_2003.csv';
  $map = array_map('str_getcsv', file($csv_file));

  foreach ($map as $product) {
    $product_code = $product[3];
    $product_code_array = explode('_', $product_code);

    $data = [
      'type' => 'personify_product',
      'field_productid' => $product[0],
      'field_member_price' => $product[11],
      'field_nonmember_price' => $product[12],
      'field_package' => $product_code_array[2],
      'field_product_code' => $product[3],
      'field_session_length' => $product_code_array[4],
    ];
    $mapping_repository = \Drupal::service('ymca_mappings.location_repository');
    $mapping = $mapping_repository->findByLocationPersonifyBranchCode($product[8]);
    $mapping = is_array($mapping) ? reset($mapping) : $mapping;
    if ($mapping && $mapping->hasField('field_location_ref')) {
      $location_id = $mapping->field_location_ref->getValue()[0]['target_id'];
      $data['field_location_ref'] = $location_id;
    }

    $mapping = Mapping::create($data);
    $mapping->setName($product[4]);
    $mapping->save();
  }
}
