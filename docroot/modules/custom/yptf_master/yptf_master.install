<?php

/**
 * @file
 * Main module for YPTF updates.
 */

use Drupal\ymca_mappings\Entity\Mapping;
use Drupal\Core\Datetime\DrupalDateTime;
use \Drupal\taxonomy\Entity\Term;

/**
 * Initial hook_updates runner.
 */
function yptf_master_install() {
  for ($i = 8001; $i < 9000; $i++) {
    $function = 'yptf_master_update_' . $i;
    if (function_exists($function)) {
      \Drupal::logger('yptf_master_install')->info('running: ' . $function);
      $function();
    }
  }
}

/**
 * Enable personify_mindbody_sync module.
 */
function yptf_master_update_8001() {
  \Drupal::service('module_installer')->install(['personify_mindbody_sync'], TRUE);
}

/**
 * Create fields.
 */
function yptf_master_update_8002() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.personify_mindbody_cache.personify_mindbody_cache.default.yml',
      $path . 'core.entity_view_display.personify_mindbody_cache.personify_mindbody_cache.default.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_clnt_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_l_num.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_order_num.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_prs_data.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_ord_date.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_user_id.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_status.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_sale_id.yml',
      $path . 'field.field.personify_mindbody_cache.personify_mindbody_cache.field_pmc_cancelled.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_clnt_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_l_num.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_order_num.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_prs_data.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_ord_date.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_user_id.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_status.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_sale_id.yml',
      $path . 'field.storage.personify_mindbody_cache.field_pmc_cancelled.yml',
      $path . 'ymca_personify.settings.yml',
    ]
  );
}

/**
 * Configure sync log.
 */
function yptf_master_update_8003() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.personify_mindbody_log.yml',
    ]
  );
}

/**
 * YPTF-133: Clear MindBody cache after booking.
 */
function yptf_master_update_8004() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mindbody_cache.mindbody_cache.default.yml',
      $path . 'core.entity_view_display.mindbody_cache.mindbody_cache.default.yml',
      $path . 'field.field.mindbody_cache.mindbody_cache.field_mindbody_cache_location.yml',
      $path . 'field.field.mindbody_cache.mindbody_cache.field_mindbody_cache_trainer.yml',
      $path . 'field.storage.mindbody_cache.field_mindbody_cache_location.yml',
      $path . 'field.storage.mindbody_cache.field_mindbody_cache_trainer.yml',
    ]
  );
}

/**
 * YPTF-133: Set slots hide time to 180 minutes.
 */
function yptf_master_update_8005() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mindbody.settings.yml',
    ]
  );
}

/**
 * Update wysiwyg editor config.
 */
function yptf_master_update_8006() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'user.role.anonymous.yml',
      $path . 'user.role.authenticated.yml',
    ]
  );
}

/**
 * Add Mapping entity "Personify Product".
 */
function yptf_master_update_8007() {
  \Drupal::service('module_installer')->install(['ymca_mappings'], TRUE);

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mappings.mapping_type.personify_product.yml',
    ]
  );
}

/**
 * Initial fields for "Personify Product" entity.
 */
function yptf_master_update_8008() {

  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.personify_product.default.yml',
      $path . 'core.entity_view_display.mapping.personify_product.default.yml',
      $path . 'field.field.mapping.personify_product.field_location_ref.yml',
      $path . 'field.field.mapping.personify_product.field_member_price.yml',
      $path . 'field.field.mapping.personify_product.field_nonmember_price.yml',
      $path . 'field.field.mapping.personify_product.field_package.yml',
      $path . 'field.field.mapping.personify_product.field_product_code.yml',
      $path . 'field.field.mapping.personify_product.field_productid.yml',
      $path . 'field.field.mapping.personify_product.field_session_length.yml',
      $path . 'field.storage.mapping.field_member_price.yml',
      $path . 'field.storage.mapping.field_nonmember_price.yml',
      $path . 'field.storage.mapping.field_package.yml',
      $path . 'field.storage.mapping.field_product_code.yml',
      $path . 'field.storage.mapping.field_productid.yml',
      $path . 'field.storage.mapping.field_session_length.yml',
    ]
  );
}

/**
 * Re-enable error handling module.
 */
function yptf_master_update_8009() {
  \Drupal::service('module_installer')->install(['ymca_errors'], TRUE);
}

/**
 * Populate "Personify Product" mappings.
 */
function yptf_master_update_8010() {
  // Read CSV file with map.
  $path = drupal_get_path('module', 'yptf_master');
  $csv_file = $path . '/misc/personal_training_products_with_PID-78637_97_2003.csv';
  $map = array_map('str_getcsv', file($csv_file));

  foreach ($map as $product) {
    $product_code = $product[4];
    $product_code_array = explode('_', $product_code);

    $data = [
      'type' => 'personify_product',
      'field_productid' => $product[1],
      'field_member_price' => $product[11],
      'field_nonmember_price' => $product[12],
      'field_package' => $product_code_array[2],
      'field_product_code' => $product[4],
      'field_session_length' => $product_code_array[4],
    ];
    $mapping_repository = \Drupal::service('ymca_mappings.location_repository');
    $mapping = $mapping_repository->findByLocationPersonifyBranchCode($product[8]);
    $mapping = is_array($mapping) ? reset($mapping) : $mapping;
    if ($mapping && $mapping->hasField('field_location_ref')) {
      $location_id = $mapping->field_location_ref->getValue()[0]['target_id'];
      $data['field_location_ref'] = $location_id;
    }

    $mapping = Mapping::create($data);
    $mapping->setName($product[5]);
    $mapping->save();
  }
}

/**
 * YPTF-150: Add Personify Product URl to config.
 */
function yptf_master_update_8011() {
  $path = drupal_get_path('module', 'ymca_mindbody') . '/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mindbody.settings.yml',
    ]
  );
}

/**
 * Import locations trainers mappings.
 */
function yptf_master_update_8012() {
  $path = 'modules/custom/ymca_mindbody/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mindbody.notifications.yml',
    ]
  );
}

/**
 * Set production URL for Personify endpoint.
 */
function yptf_master_update_8013() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_personify.settings.yml',
    ]
  );
}

/**
 * Add mapping views.
 */
function yptf_master_update_8014() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'views.view.personify_product_mapping.yml',
      $path . 'views.view.location_mapping.yml',
    ]
  );
}

/**
 * Add October Special offers for PT.
 */
function yptf_master_update_8015() {
  $path = 'modules/custom/ymca_mindbody/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_mindbody.special_offer.yml',
    ]
  );
}

/**
 * Add new field to the Personify Product Mapping.
 */
function yptf_master_update_8016() {
  $path = 'sites/default/config/staging/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'core.entity_form_display.mapping.personify_product.default.yml',
      $path . 'core.entity_view_display.mapping.personify_product.default.yml',
      $path . 'field.field.mapping.personify_product.field_price_available_from.yml',
      $path . 'field.field.mapping.personify_product.field_price_available_to.yml',
      $path . 'field.field.mapping.personify_product.field_special_member_price.yml',
      $path . 'field.field.mapping.personify_product.field_special_non_member_price.yml',
      $path . 'field.storage.mapping.field_price_available_from.yml',
      $path . 'field.storage.mapping.field_price_available_to.yml',
      $path . 'field.storage.mapping.field_special_member_price.yml',
      $path . 'field.storage.mapping.field_special_non_member_price.yml',
    ]
  );
}

/**
 * Update Personify Products mapping by PT's October Special offers.
 */
function yptf_master_update_8017() {
  $offers = \Drupal::config('ymca_mindbody.special_offer')->get();
  $mapping_repository = \Drupal::service('ymca_mappings.personify_product_repository');
  $mappings = $mapping_repository->loadAll();
  $start_date = new DrupalDateTime('2016-10-17 00:00:00', 'America/Chicago');
  $start_date = $start_date->format('Y-m-d');
  $end_date = new DrupalDateTime('2016-10-31 00:00:00', 'America/Chicago');
  $end_date = $end_date->format('Y-m-d');
  foreach ($mappings as $mapping) {
    if (isset($offers['member'][$mapping->field_package->value][$mapping->field_session_length->value])) {
      $special_member_price = $offers['member'][$mapping->field_package->value][$mapping->field_session_length->value];
      $mapping->field_special_member_price->setValue($special_member_price);
      $mapping->field_price_available_from->setValue($start_date);
      $mapping->field_price_available_to->setValue($end_date);
    }
    if (isset($offers['nonmember'][$mapping->field_package->value][$mapping->field_session_length->value])) {
      $special_nonmember_price = $offers['nonmember'][$mapping->field_package->value][$mapping->field_session_length->value];
      $mapping->field_special_non_member_price->setValue($special_nonmember_price);
    }

    $mapping->save();
  }
}

/**
 * Update MB messages.
 */
function yptf_master_update_8018() {
  $path = drupal_get_path('module', 'ymca_errors') . '/config/install/';
  \Drupal::service('config_import.importer')->importConfigs(
    [
      $path . 'ymca_errors.errors.yml',
    ]
  );
}

/**
 * Update Maplewood location mappings.
 */
function yptf_master_update_8019() {
  $config_importer = \Drupal::service('config_import.importer');
  $config_importer->setDirectory('sites/default/config/staging/');
  $config_importer->importConfigs(
    [
      // YMCA locations.
      'ymca_mindbody.trainings_mapping',
    ]
  );
  $ids = \Drupal::entityQuery('mapping')
    ->condition('type', 'location')
    ->condition('name', 'Maplewood Community Center')
    ->execute();

  $mapping = Mapping::load(reset($ids));
  $mapping->set('field_mindbody_id', '25');

  $mapping->save();
}

/**
 * Update Mindbody recipient list.
 */
function yptf_master_update_8020() {
  $config_importer = \Drupal::service('config_import.importer');
  $config_importer->setDirectory('sites/default/config/staging/');
  $config_importer->importConfigs(
    [
      // YMCA notifications.
      'ymca_mindbody.notifications',
    ]
  );
}

/**
 * Add new field Product Code NonM to the Personify Product Mapping.
 */
function yptf_master_update_8021() {
  $config_importer = \Drupal::service('config_import.importer');
  $config_importer->setDirectory('sites/default/config/staging/');
  $config_importer->importConfigs(
    [
      'field.storage.mapping.field_product_code_nonm',
      'field.field.mapping.personify_product.field_product_code_nonm',
      'core.entity_form_display.mapping.personify_product.default',
      'core.entity_view_display.mapping.personify_product.default',
      'views.view.personify_product_mapping',
    ]
  );
}

/**
 * Add new tax Staff and entity CT Staff Mapping.
 */
function yptf_master_update_8022() {
  $config_importer = \Drupal::service('config_import.importer');
  $config_importer->setDirectory('sites/default/config/staging/');
  $config_importer->importConfigs(
    [
      // Staff.
      'taxonomy.vocabulary.staff_type',
      'field.storage.mapping.field_staff_branch',
      'field.storage.mapping.field_staff_email',
      'field.storage.mapping.field_staff_name',
      'field.storage.mapping.field_staff_surname',
      'field.storage.mapping.field_staff_type',
      'field.field.mapping.staff.field_staff_branch',
      'field.field.mapping.staff.field_staff_email',
      'field.field.mapping.staff.field_staff_name',
      'field.field.mapping.staff.field_staff_surname',
      'field.field.mapping.staff.field_staff_type',
      'ymca_mappings.mapping_type.staff',
      'core.entity_form_display.mapping.staff.default',
      'core.entity_view_display.mapping.staff.default',
      'views.view.staff_mapping',
    ]
  );

  // Create terms.
  $term_names = ['Leadership', 'PT Manager'];
  foreach ($term_names as $term_name) {
    $term = Term::create([
      'vid' => 'staff_type',
      'name' => $term_name,
    ]);
    $term->save();
  }

  // Create staff.
  // 1. Get from config.
  $load_staff = \Drupal::config('ymca_mindbody.notifications')
    ->get('locations');
  foreach ($load_staff as $location => $staff) {
    $name = explode(' ', $staff[0]['name']);
    $data = [
      'type' => 'staff',
      'field_staff_email' => $staff[0]['email'],
      'field_staff_name' => $name[0],
      'field_staff_surname' => $name[1],
    ];
    // GEt locations ref.
    $mapping_repository = \Drupal::service('ymca_mappings.location_repository');
    $mapping = $mapping_repository->findByMindBodyId($location);
    $mapping = is_array($mapping) ? reset($mapping) : $mapping;
    if ($mapping) {
      $location_id = $mapping->id->getValue()[0]['value'];
      $data['field_staff_branch'] = $location_id;
    }
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => 'PT Manager', 'vid' => 'staff_type']);
    $term = reset($terms);

    if ($term) {
      $data['field_staff_type'] = $term->id();
    }
    $mapping = Mapping::create($data);
    $mapping->setName($staff[0]['name']);
    $mapping->save();
  }
}

/**
 * Enable Kronos module.
 */
function yptf_master_update_8023() {
  \Drupal::service('module_installer')->install(['yptf_kronos']);
}

