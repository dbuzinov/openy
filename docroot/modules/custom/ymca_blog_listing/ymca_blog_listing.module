<?php

/**
 * @file
 * Module file.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\SortArray;

/**
 * Implements hook_theme().
 */
function ymca_blog_listing_theme($existing, $type, $theme, $path) {
  return [
    'ymca_news_events' => [
      'variables' => [
        'items' => NULL,
      ],
      'template' => 'ymca-news-events',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ymca_blog_listing_preprocess_node(&$variables) {
  // Add list News & Events items to camps and locations.
  $node = $variables['node'];
  $bundles = ['location', 'camp'];
  if (!in_array($node->bundle(), $bundles)) {
    return;
  }

  // Load & prepare posts.
  $load_posts = function ($ids) {
    $posts = [];
    $items = \Drupal::getContainer()->get('entity.manager')->getStorage('node')->loadMultiple($ids);
    foreach ($items as $node) {
      $url = Url::fromUri('entity:node/' . $node->id());
      $posts[] = [
        'title' => new Link($node->getTitle(), $url),
        'text' => Unicode::truncate($node->field_summary->value, 180, TRUE, FALSE),
        'read_more_url' => $url,
        'created' => $node->getCreatedTime(),
        'id' => $node->id(),
      ];
    }
    return $posts;
  };

  // Sort posts by date.
  $sort_posts = function ($a, $b) {
    return SortArray::sortByKeyInt($b, $a, 'created');
  };

  // Data to output.
  $posts = [];

  // Here we'll store fetched ids.
  $ids = [
    'day' => 0,
    'related' => 0,
    'general' => 0,
  ];

  // Indicates whether general posts should be included.
  $available_general = FALSE;

  // We should not show news in the list.
  $term_query = \Drupal::entityQuery('taxonomy_term')
    ->condition('name', 'News')
    ->condition('vid', 'tags')
    ->execute();
  $news_term_id = reset($term_query);

  $nid = $node->id();

  // Check if general blog posts available for the node.
  $field_name_general = 'field_include_general_blog_posts';
  if ($node->hasField($field_name_general)) {
    $field_data_general = $node->get($field_name_general);
    if ($field_data_general->getValue()[0]['value']) {
      $available_general = TRUE;
    }
  }

  // Create parent query object.
  $query_parent = \Drupal::entityQuery('node')
    ->sort('created', 'DESC')
    ->range(0, 2);

  $condition_news = $query_parent->orConditionGroup()
    ->notExists('field_tags')
    ->condition('field_tags.target_id', $news_term_id, '!=');

  $query_parent
    ->condition('type', 'blog')
      ->condition('status', NODE_PUBLISHED)
      ->condition($condition_news);

  // Retrieve and sort day posts.
  $query = clone $query_parent;
  $result = $query
    ->condition('field_related_camps_locations.target_id', $nid)
      ->execute();
  $ids['day'] = $load_posts($result);
  usort($ids['day'], $sort_posts);

  // Retrieve and sort related posts.
  $query = clone $query_parent;
  $result = $query
    ->condition('field_site_section.target_id', $nid)
      ->execute();
  $ids['related'] = $load_posts($result);
  usort($ids['related'], $sort_posts);

  // Retrieve and sort general posts (if they are allowed).
  $query = clone $query_parent;
  if ($available_general) {
    $result = $query
      ->notExists('field_site_section')
        ->notExists('field_related_camps_locations')
        ->execute();
    $ids['general'] = $load_posts($result);
    usort($ids['general'], $sort_posts);
  }

  // Only 2 day camp news.
  if (count($ids['day']) == 2 && empty($ids['related'])) {
    $posts = $ids['day'];
  }
  // Only 2 related news.
  elseif (count($ids['related']) == 2 && empty($ids['day'])) {
    $posts = $ids['related'];
  }
  // 1 related and 1 day camp news.
  elseif (!empty($ids['day']) && !empty($ids['related'])) {
    $posts[] = reset($ids['day']);
    $posts[] = reset($ids['related']);
  }
  // 1 day and 1 general.
  elseif (count($ids['day']) == 1 && empty($ids['related'])) {
    $posts[] = reset($ids['day']);
    if ($available_general) {
      $posts[] = reset($ids['general']);
    }
  }
  // 1 related and 1 general.
  elseif (count($ids['related']) == 1 && empty($ids['day'])) {
    $posts[] = reset($ids['related']);
    if ($available_general) {
      $posts[] = reset($ids['general']);
    }
  }
  // General posts, if allowed.
  elseif (empty($ids['day']) && empty($ids['related'])) {
    if (empty($ids['general'])) {
      return;
    }

    $posts = $ids['general'];
  }

  if (!empty($posts)) {
    usort($posts, $sort_posts);

    // Collect ids for node_list tag.
    $ids = [];
    foreach ($posts as $item) {
      $ids[] = $item['id'];
    }

    $variables['news_events'] = [
      '#theme' => 'ymca_news_events',
      '#items' => $posts,
      '#cache' => [
        'tags' => Cache::mergeTags(
          ['node_list'],
          Cache::buildTags('node', $ids)
        )
      ]
    ];
  }
}
