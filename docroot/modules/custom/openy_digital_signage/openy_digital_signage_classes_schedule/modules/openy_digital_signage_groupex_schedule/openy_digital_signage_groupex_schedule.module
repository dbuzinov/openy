<?php

/**
 * @file
 * Contains specific features related to the functionality provided by module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\openy_digital_signage_classes_schedule\Entity\OpenYClassesSession;
use Drupal\openy_digital_signage_groupex_schedule\Entity\OpenYClassesGroupExSession;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function openy_digital_signage_groupex_schedule_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'system.admin_openy_digital_signage_groupex_schedule_settings':
      $output = '';
      $output .= '<h3>' . t('GroupEx Pro settings') . '</h3>';
      $output .= '<p>' . t('Specify locations you want to use for import from GroupEx. Only selected locations are used to import sessions.') . '</p>';
      $output .= '<p>';
      $output .= t('To configure mapping with GroupEx Pro go to the @url.', [
        '@url' => Link::fromTextAndUrl('Locations Mapping page', Url::fromRoute('view.location_mapping.page_1'))
          ->toString(),
      ]);
      $output .= '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_create().
 */
function openy_digital_signage_groupex_schedule_entity_create(EntityInterface $entity) {
  /** @var OpenYClassesSession $entity */
  if ($entity->getEntityTypeId() != 'openy_ds_classes_groupex_session') {
    return;
  }

  $room_manager = \Drupal::service('openy_digital_signage_room.manager');
  $room = $room_manager->getOrCreateRoomByExternalId($entity->get('studio')->value, $entity->get('location')->target_id, 'groupex');
  if (!$room || !$room->status->value) {
    return;
  }

  // Get settings config.
  $config = \Drupal::configFactory()
    ->get('openy_digital_signage_groupex_schedule.settings');

  // Create a new Classes Session entity.
  $session = \Drupal::entityTypeManager()
    ->getStorage('openy_ds_classes_session')
    ->create([
      'source' => 'groupex',
      'source_id' => $entity->get('groupex_id')->value,
      'title' => $entity->get('title')->value,
      'status' => !$entity->get('canceled')->value,
      'date_time' => [
        'value' => $entity->get('date_time')->value,
        'end_value' => $entity->get('date_time')->end_value,
      ],
      'field_session_author' => [
        'target_id' => $config->get('default_author'),
      ],
      'room' => [
        'target_id' => $room->id(),
      ],
      'instructor' => $entity->get('original_instructor')->value,
      'sub_instructor' => $entity->get('sub_instructor')->value,
      'overridden' => FALSE,
      'original_session' => NULL,
    ]);
  $session->save();
}

/**
 * Implements hook_entity_update().
 */
function openy_digital_signage_groupex_schedule_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'openy_ds_classes_groupex_session') {
    return;
  }

  $entity_manager = \Drupal::entityTypeManager()
    ->getStorage('openy_ds_classes_session');
  $entities = $entity_manager->loadByProperties([
    'source_id' => $entity->get('groupex_id')->value,
  ]);
  if (empty($entities)) {
    return;
  }

  // Update Classes Session associated with this GroupEx Pro session.
  $session = reset($entities);
  if (!$session instanceof OpenYClassesSession) {
    return;
  }

  // Retrieve the corresponding Room entity.
  $room_manager = \Drupal::service('openy_digital_signage_room.manager');
  $room = $room_manager->getOrCreateRoomByExternalId($entity->get('studio')->value, $entity->get('location')->target_id, 'groupex');
  if (!$room || !$room->status->value) {
    $session->delete();
    return;
  }

  $session->set('title', $entity->get('title')->value);
  $session->set('status', !$entity->get('canceled')->value);
  $session->set('date_time', [
    'value' => $entity->get('date_time')->value,
    'end_value' => $entity->get('date_time')->end_value,
  ]);
  $session->set('room', [
    'target_id' => $room->id(),
  ]);
  $session->set('instructor', $entity->get('original_instructor')->value);
  $session->set('sub_instructor', $entity->get('sub_instructor')->value);
  $session->save();
}

/**
 * Implements hook_entity_delete().
 */
function openy_digital_signage_groupex_schedule_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'openy_ds_classes_session') {
    return;
  }
  /* @var OpenYClassesSession $entity */
  if (empty($entity->get('source_id')->value)) {
    return;
  }
  // While removing Classes Session by cron remove GroupEx Entity
  // used while Classes Session created.
  $entity_manager = \Drupal::entityTypeManager()
    ->getStorage('openy_ds_classes_groupex_session');
  $groupex_entity = $entity_manager->loadByProperties([
    'groupex_id' => $entity->get('source_id')->value,
  ]);
  if (empty($groupex_entity)) {
    return;
  }
  $groupex_entity = reset($groupex_entity);
  $groupex_entity->delete();
}

/**
 * Implements hook_cron().
 */
function openy_digital_signage_groupex_schedule_cron() {
  /* @var \Drupal\openy_digital_signage_groupex_schedule\OpenYSessionsGroupExCron $cron_service */
  $cron_service = \Drupal::service('openy_digital_signage_groupex_schedule.cron');

  $cron_service->importSessions();
}
