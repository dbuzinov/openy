
// Mixin to evenly space out the dots of the progress bar.
// @param int
// The number of dots a progress bar will have.
@mixin progress-bar($num) {
  @for $i from 1 through ($num - 1) {
    $x: $num - 1;
    $y: ($i - 1);
    &--#{$num}-#{$i} {
      @if $i == 1 {
        left: -13px;
        @include breakpoint($tablet) {
          left: -26px;
        }
      }
      @else {
        left: calc(100% / #{$x} * #{$y} - 13px);
        @include breakpoint($tablet) {
          left: calc(100% / #{$x} * #{$y} - 26px);
        }
      }
    }
  }
}

// Mixin for how much of the progress bar to fill in.
// @param int
// The number of dots a progress bar will have.
@mixin progress-bar-fill($num) {
  @for $i from 0 through $num {
    $x: $num - 1;
    $y: ($i - 1);
    &-#{$num}--#{$i} {
      .line {
        width: calc(100% / #{$x} * #{$y});
      }
      @for $k from $i through $num {
        .point--#{$num}-#{$k + 1} {
          &:before {
            content: none;
            display: none;
          }
        }
      }
    }
  }
}

// Mixin to evenly space out the dots of the progress bar above mobile.
@mixin progress-bar-desktop() {
  // Multiplier.
  $mul: 5;
  @for $i from 5 through 9 {
    *[class*="compain-progress--fill-#{$i}"] {
      @include breakpoint($tablet) {
        max-width: calc(100% - (15px * #{$mul}));
      }
      @include breakpoint($desktop-small) {
        max-width: calc(100% - (67px * #{$mul}));
      }
      @include breakpoint($desktop) {
        max-width: calc(100% - (120px * #{$mul}));
      }
    }
    $mul: $mul - 1;
  }
}

/**
 * Generates style triangle.
 * @param $position
 *   Position of triangle: top, right, bottom, left
 * @param $color
 * @param $width
 * @param $height
 */
@mixin triangle($position, $color, $width: 20px, $height: 10px) {
  border-style: solid;
  @if ($position == top) {
    border-width: 0 ($width/2) $height ($width/2);
    border-color: transparent transparent $color;
  }
  @else if ($position == right) {
    border-width: ($height/2) 0 ($height/2) $width;
    border-color: transparent transparent transparent $color;
  }
  @else if ($position == bottom) {
    border-width: $height ($width/2) 0 ($width/2);
    border-color: $color transparent transparent transparent;
  }
  @else if ($position == left) {
    border-width: ($height/2) $width ($height/2) 0;
    border-color: transparent $color transparent transparent;
  }
}

//
// Generates style triangle for pseudo-elements (:before, :after)
//
@mixin triangle-pseudo($position, $color, $width: 20px, $height: 10px) {
  @include triangle($position, $color, $width, $height);
  content: "";
  display: block;
  color: $color;
}

